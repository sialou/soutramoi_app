import { Component } from '@angular/core';
import { SpinnerComponent } from 'spinners-angular/spinners-utils';
export class SpinnerDottedComponent extends SpinnerComponent {
    constructor() {
        super(...arguments);
        this.coords = [
            { x: 22, y: -20 },
            { x: 29, y: 0 },
            { x: 22, y: 20 },
            { x: 0, y: 30 },
            { x: -23, y: 20 },
            { x: -30, y: 0 },
            { x: -23, y: -20 },
            { x: 0, y: -30 },
        ];
    }
    get duration() {
        return 200 / this.speed;
    }
    get centerStyle() {
        return !this.still
            ? {
                animation: `spinners-angular-dotted-center ${this.duration}s ease-out infinite`,
                transformOrigin: 'center',
            }
            : { display: 'none' };
    }
    circleStyle(i) {
        return Object.assign({ transform: `translate(${this.coords[i].x}px, ${this.coords[i].y}px)` }, (!this.still
            ? {
                animation: `spinners-angular-dotted-shrink ${this.duration}s cubic-bezier(0, 0.9, 0, 0.9) ${(this.duration / 20) * i}s infinite`
            }
            : {}));
    }
}
SpinnerDottedComponent.decorators = [
    { type: Component, args: [{
                selector: 'sa-spinner-dotted',
                template: "<svg *ngIf=\"enabled\" fill=\"none\" [ngStyle]=\"svgStyle\" viewBox=\"0 0 66 66\">\r\n  <circle\r\n    *ngFor=\"let c of coords; index as i\"\r\n    cx=\"33\"\r\n    cy=\"33\"\r\n    fill=\"currentColor\"\r\n    [attr.r]=\"3 * (thickness / 100)\"\r\n    [ngStyle]=\"circleStyle(i)\"\r\n  />\r\n  <circle\r\n    cx=\"33\"\r\n    cy=\"33\"\r\n    fill=\"currentColor\"\r\n    [attr.r]=\"6 * (thickness / 100)\"\r\n    [ngStyle]=\"centerStyle\"\r\n  />\r\n</svg>\r\n",
                styles: ["@-webkit-keyframes spinners-angular-dotted-center{0%,15%,85%,to{transform:scale(0)}40%,50%{transform:scale(1)}84%{transform:scale(.45)}}@keyframes spinners-angular-dotted-center{0%,15%,85%,to{transform:scale(0)}40%,50%{transform:scale(1)}84%{transform:scale(.45)}}@-webkit-keyframes spinners-angular-dotted-shrink{50%{transform:translate(0)}}@keyframes spinners-angular-dotted-shrink{50%{transform:translate(0)}}\n"]
            },] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3Bpbm5lci1kb3R0ZWQuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vcHJvamVjdHMvc3Bpbm5lcnMtYW5ndWxhci9zcGlubmVyLWRvdHRlZC9zcmMvc3Bpbm5lci1kb3R0ZWQuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDMUMsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0saUNBQWlDLENBQUM7QUFPbkUsTUFBTSxPQUFPLHNCQUF1QixTQUFRLGdCQUFnQjtJQUw1RDs7UUFNRSxXQUFNLEdBQUc7WUFDTCxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQ2pCLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFO1lBQ2YsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUU7WUFDaEIsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUU7WUFDZixFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFO1lBQ2pCLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUU7WUFDaEIsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQ2xCLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUU7U0FDbkIsQ0FBQztJQThCSixDQUFDO0lBNUJDLElBQUksUUFBUTtRQUNSLE9BQU8sR0FBRyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUM7SUFDNUIsQ0FBQztJQUVELElBQUksV0FBVztRQUNYLE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSztZQUNkLENBQUMsQ0FBQztnQkFDRSxTQUFTLEVBQUUsa0NBQWtDLElBQUksQ0FBQyxRQUFRLHFCQUFxQjtnQkFDL0UsZUFBZSxFQUFFLFFBQVE7YUFDNUI7WUFDRCxDQUFDLENBQUMsRUFBRSxPQUFPLEVBQUUsTUFBTSxFQUFFLENBQUM7SUFDOUIsQ0FBQztJQUVELFdBQVcsQ0FBQyxDQUFTO1FBQ2pCLHVCQUNJLFNBQVMsRUFBRSxhQUFhLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLElBQ2pFLENBQ0MsQ0FBQyxJQUFJLENBQUMsS0FBSztZQUNQLENBQUMsQ0FBQztnQkFDRSxTQUFTLEVBQ1Asa0NBQ0ksSUFBSSxDQUFDLFFBQ1Qsa0NBQWtDLENBQUMsSUFBSSxDQUFDLFFBQVEsR0FBRyxFQUFFLENBQUMsR0FBRyxDQUFDLFlBQVk7YUFDM0U7WUFDRCxDQUFDLENBQUMsRUFBRSxDQUNYLEVBQ0g7SUFDTixDQUFDOzs7WUE1Q0YsU0FBUyxTQUFDO2dCQUNQLFFBQVEsRUFBRSxtQkFBbUI7Z0JBQzdCLDJkQUE4Qzs7YUFFakQiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgU3Bpbm5lckNvbXBvbmVudCB9IGZyb20gJ3NwaW5uZXJzLWFuZ3VsYXIvc3Bpbm5lcnMtdXRpbHMnO1xyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgICBzZWxlY3RvcjogJ3NhLXNwaW5uZXItZG90dGVkJyxcclxuICAgIHRlbXBsYXRlVXJsOiAnLi9zcGlubmVyLWRvdHRlZC5jb21wb25lbnQuaHRtbCcsXHJcbiAgICBzdHlsZVVybHM6IFsnLi9zcGlubmVyLWRvdHRlZC5jb21wb25lbnQuY3NzJ10sXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBTcGlubmVyRG90dGVkQ29tcG9uZW50IGV4dGVuZHMgU3Bpbm5lckNvbXBvbmVudCB7XHJcbiAgY29vcmRzID0gW1xyXG4gICAgICB7IHg6IDIyLCB5OiAtMjAgfSxcclxuICAgICAgeyB4OiAyOSwgeTogMCB9LFxyXG4gICAgICB7IHg6IDIyLCB5OiAyMCB9LFxyXG4gICAgICB7IHg6IDAsIHk6IDMwIH0sXHJcbiAgICAgIHsgeDogLTIzLCB5OiAyMCB9LFxyXG4gICAgICB7IHg6IC0zMCwgeTogMCB9LFxyXG4gICAgICB7IHg6IC0yMywgeTogLTIwIH0sXHJcbiAgICAgIHsgeDogMCwgeTogLTMwIH0sXHJcbiAgXTtcclxuXHJcbiAgZ2V0IGR1cmF0aW9uKCkge1xyXG4gICAgICByZXR1cm4gMjAwIC8gdGhpcy5zcGVlZDtcclxuICB9XHJcblxyXG4gIGdldCBjZW50ZXJTdHlsZSgpIHtcclxuICAgICAgcmV0dXJuICF0aGlzLnN0aWxsXHJcbiAgICAgICAgICA/IHtcclxuICAgICAgICAgICAgICBhbmltYXRpb246IGBzcGlubmVycy1hbmd1bGFyLWRvdHRlZC1jZW50ZXIgJHt0aGlzLmR1cmF0aW9ufXMgZWFzZS1vdXQgaW5maW5pdGVgLFxyXG4gICAgICAgICAgICAgIHRyYW5zZm9ybU9yaWdpbjogJ2NlbnRlcicsXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICA6IHsgZGlzcGxheTogJ25vbmUnIH07XHJcbiAgfVxyXG5cclxuICBjaXJjbGVTdHlsZShpOiBudW1iZXIpIHtcclxuICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgIHRyYW5zZm9ybTogYHRyYW5zbGF0ZSgke3RoaXMuY29vcmRzW2ldLnh9cHgsICR7dGhpcy5jb29yZHNbaV0ueX1weClgLFxyXG4gICAgICAgICAgLi4uKFxyXG4gICAgICAgICAgICAgICF0aGlzLnN0aWxsXHJcbiAgICAgICAgICAgICAgICAgID8ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgYW5pbWF0aW9uOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBgc3Bpbm5lcnMtYW5ndWxhci1kb3R0ZWQtc2hyaW5rICR7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmR1cmF0aW9uXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1zIGN1YmljLWJlemllcigwLCAwLjksIDAsIDAuOSkgJHsodGhpcy5kdXJhdGlvbiAvIDIwKSAqIGl9cyBpbmZpbml0ZWBcclxuICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICA6IHt9XHJcbiAgICAgICAgICApLFxyXG4gICAgICB9O1xyXG4gIH1cclxufVxyXG4iXX0=