import { Component, EventEmitter, Input, Output, } from '@angular/core';
import { fromEvent } from 'rxjs';
import { filter, mapTo, startWith, switchMap } from 'rxjs/operators';
import { MapService } from '../map/map.service';
import { deprecationWarning } from '../utils';
import * as i0 from "@angular/core";
import * as i1 from "../map/map.service";
export class LayerComponent {
    constructor(mapService) {
        this.mapService = mapService;
        this.layerClick = new EventEmitter();
        this.layerDblClick = new EventEmitter();
        this.layerMouseDown = new EventEmitter();
        this.layerMouseUp = new EventEmitter();
        this.layerMouseEnter = new EventEmitter();
        this.layerMouseLeave = new EventEmitter();
        this.layerMouseMove = new EventEmitter();
        this.layerMouseOver = new EventEmitter();
        this.layerMouseOut = new EventEmitter();
        this.layerContextMenu = new EventEmitter();
        this.layerTouchStart = new EventEmitter();
        this.layerTouchEnd = new EventEmitter();
        this.layerTouchCancel = new EventEmitter();
        /**
         * @deprecated Use layerClick instead
         */
        // eslint-disable-next-line @angular-eslint/no-output-native
        this.click = new EventEmitter();
        /**
         * @deprecated Use layerDblClick instead
         */
        this.dblClick = new EventEmitter();
        /**
         * @deprecated Use layerMouseDown instead
         */
        this.mouseDown = new EventEmitter();
        /**
         * @deprecated Use layerMouseUp instead
         */
        this.mouseUp = new EventEmitter();
        /**
         * @deprecated Use layerMouseEnter instead
         */
        this.mouseEnter = new EventEmitter();
        /**
         * @deprecated Use layerMouseLeave instead
         */
        this.mouseLeave = new EventEmitter();
        /**
         * @deprecated Use layerMouseMove instead
         */
        this.mouseMove = new EventEmitter();
        /**
         * @deprecated Use layerMouseOver instead
         */
        this.mouseOver = new EventEmitter();
        /**
         * @deprecated Use layerMouseOut instead
         */
        this.mouseOut = new EventEmitter();
        /**
         * @deprecated Use layerContextMenu instead
         */
        this.contextMenu = new EventEmitter();
        /**
         * @deprecated Use layerTouchStart instead
         */
        this.touchStart = new EventEmitter();
        /**
         * @deprecated Use layerTouchEnd instead
         */
        this.touchEnd = new EventEmitter();
        /**
         * @deprecated Use layerTouchCancel instead
         */
        this.touchCancel = new EventEmitter();
        this.layerAdded = false;
    }
    ngOnInit() {
        this.warnDeprecatedOutputs();
        this.sub = this.mapService.mapLoaded$
            .pipe(switchMap(() => fromEvent(this.mapService.mapInstance, 'styledata').pipe(mapTo(false), filter(() => !this.mapService.mapInstance.getLayer(this.id)), startWith(true))))
            .subscribe((bindEvents) => this.init(bindEvents));
    }
    ngOnChanges(changes) {
        if (!this.layerAdded) {
            return;
        }
        if (changes['paint'] && !changes['paint'].isFirstChange()) {
            this.mapService.setAllLayerPaintProperty(this.id, changes['paint'].currentValue);
        }
        if (changes['layout'] && !changes['layout'].isFirstChange()) {
            this.mapService.setAllLayerLayoutProperty(this.id, changes['layout'].currentValue);
        }
        if (changes['filter'] && !changes['filter'].isFirstChange()) {
            this.mapService.setLayerFilter(this.id, changes['filter'].currentValue);
        }
        if (changes['before'] && !changes['before'].isFirstChange()) {
            this.mapService.setLayerBefore(this.id, changes['before'].currentValue);
        }
        if ((changes['minzoom'] && !changes['minzoom'].isFirstChange()) ||
            (changes['maxzoom'] && !changes['maxzoom'].isFirstChange())) {
            this.mapService.setLayerZoomRange(this.id, this.minzoom, this.maxzoom);
        }
    }
    ngOnDestroy() {
        if (this.layerAdded) {
            this.mapService.removeLayer(this.id);
        }
        if (this.sub) {
            this.sub.unsubscribe();
        }
    }
    init(bindEvents) {
        const layer = {
            layerOptions: {
                id: this.id,
                type: this.type,
                source: this.source,
                metadata: this.metadata,
                'source-layer': this.sourceLayer,
                minzoom: this.minzoom,
                maxzoom: this.maxzoom,
                filter: this.filter,
                layout: this.layout,
                paint: this.paint,
            },
            layerEvents: {
                layerClick: this.layerClick,
                layerDblClick: this.layerDblClick,
                layerMouseDown: this.layerMouseDown,
                layerMouseUp: this.layerMouseUp,
                layerMouseEnter: this.layerMouseEnter,
                layerMouseLeave: this.layerMouseLeave,
                layerMouseMove: this.layerMouseMove,
                layerMouseOver: this.layerMouseOver,
                layerMouseOut: this.layerMouseOut,
                layerContextMenu: this.layerContextMenu,
                layerTouchStart: this.layerTouchStart,
                layerTouchEnd: this.layerTouchEnd,
                layerTouchCancel: this.layerTouchCancel,
                click: this.click,
                dblClick: this.dblClick,
                mouseDown: this.mouseDown,
                mouseUp: this.mouseUp,
                mouseEnter: this.mouseEnter,
                mouseLeave: this.mouseLeave,
                mouseMove: this.mouseMove,
                mouseOver: this.mouseOver,
                mouseOut: this.mouseOut,
                contextMenu: this.contextMenu,
                touchStart: this.touchStart,
                touchEnd: this.touchEnd,
                touchCancel: this.touchCancel,
            },
        };
        this.mapService.addLayer(layer, bindEvents, this.before);
        this.layerAdded = true;
    }
    warnDeprecatedOutputs() {
        const dw = deprecationWarning.bind(undefined, LayerComponent.name);
        if (this.click.observed) {
            dw('click', 'layerClick');
        }
        if (this.dblClick.observed) {
            dw('dblClick', 'layerDblClick');
        }
        if (this.mouseDown.observed) {
            dw('mouseDown', 'layerMouseDown');
        }
        if (this.mouseUp.observed) {
            dw('mouseUp', 'layerMouseUp');
        }
        if (this.mouseEnter.observed) {
            dw('mouseEnter', 'layerMouseEnter');
        }
        if (this.mouseLeave.observed) {
            dw('mouseLeave', 'layerMouseLeave');
        }
        if (this.mouseMove.observed) {
            dw('mouseMove', 'layerMouseMove');
        }
        if (this.mouseOver.observed) {
            dw('mouseOver', 'layerMouseOver');
        }
        if (this.mouseOut.observed) {
            dw('mouseOut', 'layerMouseOut');
        }
        if (this.contextMenu.observed) {
            dw('contextMenu', 'layerContextMenu');
        }
        if (this.touchStart.observed) {
            dw('touchStart', 'layerTouchStart');
        }
        if (this.touchEnd.observed) {
            dw('touchEnd', 'layerTouchEnd');
        }
        if (this.touchCancel.observed) {
            dw('touchCancel', 'layerTouchCancel');
        }
    }
}
LayerComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.1.1", ngImport: i0, type: LayerComponent, deps: [{ token: i1.MapService }], target: i0.ɵɵFactoryTarget.Component });
LayerComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "14.1.1", type: LayerComponent, selector: "mgl-layer", inputs: { id: "id", source: "source", type: "type", metadata: "metadata", sourceLayer: "sourceLayer", filter: "filter", layout: "layout", paint: "paint", before: "before", minzoom: "minzoom", maxzoom: "maxzoom" }, outputs: { layerClick: "layerClick", layerDblClick: "layerDblClick", layerMouseDown: "layerMouseDown", layerMouseUp: "layerMouseUp", layerMouseEnter: "layerMouseEnter", layerMouseLeave: "layerMouseLeave", layerMouseMove: "layerMouseMove", layerMouseOver: "layerMouseOver", layerMouseOut: "layerMouseOut", layerContextMenu: "layerContextMenu", layerTouchStart: "layerTouchStart", layerTouchEnd: "layerTouchEnd", layerTouchCancel: "layerTouchCancel", click: "click", dblClick: "dblClick", mouseDown: "mouseDown", mouseUp: "mouseUp", mouseEnter: "mouseEnter", mouseLeave: "mouseLeave", mouseMove: "mouseMove", mouseOver: "mouseOver", mouseOut: "mouseOut", contextMenu: "contextMenu", touchStart: "touchStart", touchEnd: "touchEnd", touchCancel: "touchCancel" }, usesOnChanges: true, ngImport: i0, template: '', isInline: true });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.1.1", ngImport: i0, type: LayerComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'mgl-layer',
                    template: '',
                }]
        }], ctorParameters: function () { return [{ type: i1.MapService }]; }, propDecorators: { id: [{
                type: Input
            }], source: [{
                type: Input
            }], type: [{
                type: Input
            }], metadata: [{
                type: Input
            }], sourceLayer: [{
                type: Input
            }], filter: [{
                type: Input
            }], layout: [{
                type: Input
            }], paint: [{
                type: Input
            }], before: [{
                type: Input
            }], minzoom: [{
                type: Input
            }], maxzoom: [{
                type: Input
            }], layerClick: [{
                type: Output
            }], layerDblClick: [{
                type: Output
            }], layerMouseDown: [{
                type: Output
            }], layerMouseUp: [{
                type: Output
            }], layerMouseEnter: [{
                type: Output
            }], layerMouseLeave: [{
                type: Output
            }], layerMouseMove: [{
                type: Output
            }], layerMouseOver: [{
                type: Output
            }], layerMouseOut: [{
                type: Output
            }], layerContextMenu: [{
                type: Output
            }], layerTouchStart: [{
                type: Output
            }], layerTouchEnd: [{
                type: Output
            }], layerTouchCancel: [{
                type: Output
            }], click: [{
                type: Output
            }], dblClick: [{
                type: Output
            }], mouseDown: [{
                type: Output
            }], mouseUp: [{
                type: Output
            }], mouseEnter: [{
                type: Output
            }], mouseLeave: [{
                type: Output
            }], mouseMove: [{
                type: Output
            }], mouseOver: [{
                type: Output
            }], mouseOut: [{
                type: Output
            }], contextMenu: [{
                type: Output
            }], touchStart: [{
                type: Output
            }], touchEnd: [{
                type: Output
            }], touchCancel: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,