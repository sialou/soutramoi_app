{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport __NG_CLI_RESOURCE__0 from \"./dialog.component.scss?ngResource\";\nimport { animate, style, transition, trigger } from '@angular/animations';\nimport { Component, Input, Output, EventEmitter, ElementRef } from '@angular/core';\nimport { Subject, Subscription } from 'rxjs';\nlet DialogComponent = class DialogComponent {\n  constructor(el) {\n    this.el = el;\n    this.width = 280;\n    this.backdropDismiss = true;\n    this.showConfirm = true;\n    this.showCancel = false;\n    this.confirmText = 'Oui';\n    this.cancelText = 'Non';\n    this.oninit = new EventEmitter();\n    this.onconfirm = new EventEmitter();\n    this.oncancel = new EventEmitter();\n    this.backdropState = false;\n    this.contentState = false;\n    this.listener = new Subject();\n    this.sub = Subscription.EMPTY;\n    this.element = this.el.nativeElement;\n  }\n  ngOnInit() {\n    if (this.width && typeof this.width === 'number') {\n      this.width = this.width + 'px';\n    }\n    this.oninit.emit(this);\n    document.body.appendChild(this.element);\n    this.sub = this.listen().subscribe(state => {\n      if (state) {\n        this.backdropState = true;\n        setTimeout(() => this.contentState = true, 150);\n      } else {\n        this.contentState = false;\n        setTimeout(() => this.backdropState = false, 300);\n      }\n    });\n  }\n  ngOnDestroy() {\n    this.sub.unsubscribe();\n    this.element.remove();\n  }\n  listen() {\n    return this.listener.asObservable();\n  }\n  open() {\n    this.listener.next(true);\n  }\n  close() {\n    this.listener.next(false);\n  }\n  backdropClose(event) {\n    const backdrop = this.element.querySelector('.dialog-container');\n    if (event.target !== backdrop || !this.backdropDismiss) {\n      return;\n    }\n    this.close();\n  }\n  onConfirm(event) {\n    if (this.onconfirm.observers.length) {\n      this.onconfirm.emit(event);\n    } else {\n      this.close();\n    }\n  }\n  onCancel(event) {\n    if (this.oncancel.observers.length) {\n      this.oncancel.emit(event);\n    } else {\n      this.close();\n    }\n  }\n};\nDialogComponent.ctorParameters = () => [{\n  type: ElementRef\n}];\nDialogComponent.propDecorators = {\n  title: [{\n    type: Input\n  }],\n  width: [{\n    type: Input\n  }],\n  backdropDismiss: [{\n    type: Input\n  }],\n  showConfirm: [{\n    type: Input\n  }],\n  showCancel: [{\n    type: Input\n  }],\n  confirmText: [{\n    type: Input\n  }],\n  cancelText: [{\n    type: Input\n  }],\n  oninit: [{\n    type: Output\n  }],\n  onconfirm: [{\n    type: Output\n  }],\n  oncancel: [{\n    type: Output\n  }]\n};\nDialogComponent = __decorate([Component({\n  selector: 'app-dialog',\n  animations: [trigger('AnimContent', [transition(':enter', [style({\n    opacity: 0,\n    transform: 'scale(1.185)'\n  }), animate('0.4s ease', style({\n    opacity: 1,\n    transform: 'scale(1)'\n  }))]), transition(':leave', [style({\n    transform: 'scale(1)',\n    opacity: 1\n  }), animate('0.2s ease', style({\n    transform: 'scale(0.815)',\n    opacity: 0\n  }))])]), trigger('AnimBackdrop', [transition(':enter', [style({\n    backgroundColor: 'rgba(0, 0, 0, 0.0)'\n  }), animate('0.3s ease-in', style({\n    backgroundColor: 'rgba(0, 0, 0, 0.6)'\n  }))]), transition(':leave', [style({\n    backgroundColor: 'rgba(0, 0, 0, 0.6)'\n  }), animate('0.2s ease-out', style({\n    backgroundColor: 'rgba(0, 0, 0, 0.0)'\n  }))])])],\n  template: `\n    <div class=\"dialog-container\" role=\"document\" [@AnimBackdrop] *ngIf=\"backdropState\" (click)=\"backdropClose($event)\">\n      <div class=\"dialog-content\" [@AnimContent] *ngIf=\"contentState\" [style.width]=\"width\">\n        <div class=\"dialog-title\" *ngIf=\"title\">\n          <div class=\"inner\">{{ title }}</div>\n        </div>\n        <div class=\"dialog-body\">\n          <ng-content></ng-content>\n        </div>\n        <div class=\"dialog-actions\" *ngIf=\"showConfirm || showCancel\">\n          <button app-button block class=\"cancel\" (click)=\"onCancel($event)\" *ngIf=\"showCancel\">\n            {{ cancelText }}\n          </button>\n          <button app-button block class=\"confirm\" (click)=\"onConfirm($event)\" *ngIf=\"showConfirm\">\n            {{ confirmText }}\n          </button>\n        </div>\n      </div>\n    </div>\n  `,\n  styles: [__NG_CLI_RESOURCE__0]\n})], DialogComponent);\nexport { DialogComponent };","map":{"version":3,"mappings":"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","names":["animate","style","transition","trigger","Component","Input","Output","EventEmitter","ElementRef","Subject","Subscription","DialogComponent","constructor","el","EMPTY","element","nativeElement","ngOnInit","width","oninit","emit","document","body","appendChild","sub","listen","subscribe","state","backdropState","setTimeout","contentState","ngOnDestroy","unsubscribe","remove","listener","asObservable","open","next","close","backdropClose","event","backdrop","querySelector","target","backdropDismiss","onConfirm","onconfirm","observers","length","onCancel","oncancel","selector","animations","opacity","transform","backgroundColor","template"],"sourceRoot":"","sources":["/home/digifemmes-22lab149/Bureau/soutramoi_app/src/app/shared/dialog/dialog.component.ts"],"sourcesContent":["import { animate, style, transition, trigger } from '@angular/animations';\nimport { Component, OnInit, OnDestroy, Input, Output, EventEmitter, ElementRef } from '@angular/core';\nimport { Subject, Subscription } from 'rxjs';\n\n@Component({\n  selector: 'app-dialog',\n  styleUrls: ['./dialog.component.scss'],\n  animations: [\n    trigger('AnimContent', [\n      transition(\n        ':enter',\n        [\n          style({\n            opacity: 0,\n            transform: 'scale(1.185)',\n          }),\n          animate('0.4s ease', style({\n            opacity: 1,\n            transform: 'scale(1)',\n          }))\n        ]\n      ),\n      transition(\n        ':leave',\n        [\n          style({\n            transform: 'scale(1)',\n            opacity: 1,\n          }),\n          animate('0.2s ease', style({\n            transform: 'scale(0.815)',\n            opacity: 0,\n          }))\n        ]\n      )\n    ]),\n    trigger('AnimBackdrop', [\n      transition(\n        ':enter',\n        [\n          style({\n            backgroundColor: 'rgba(0, 0, 0, 0.0)'\n          }),\n          animate('0.3s ease-in', style({\n            backgroundColor: 'rgba(0, 0, 0, 0.6)'\n          }))\n        ]\n      ),\n      transition(\n        ':leave',\n        [\n          style({\n            backgroundColor: 'rgba(0, 0, 0, 0.6)'\n          }),\n          animate('0.2s ease-out', style({\n            backgroundColor: 'rgba(0, 0, 0, 0.0)'\n          }))\n        ]\n      )\n    ]),\n  ],\n  template: `\n    <div class=\"dialog-container\" role=\"document\" [@AnimBackdrop] *ngIf=\"backdropState\" (click)=\"backdropClose($event)\">\n      <div class=\"dialog-content\" [@AnimContent] *ngIf=\"contentState\" [style.width]=\"width\">\n        <div class=\"dialog-title\" *ngIf=\"title\">\n          <div class=\"inner\">{{ title }}</div>\n        </div>\n        <div class=\"dialog-body\">\n          <ng-content></ng-content>\n        </div>\n        <div class=\"dialog-actions\" *ngIf=\"showConfirm || showCancel\">\n          <button app-button block class=\"cancel\" (click)=\"onCancel($event)\" *ngIf=\"showCancel\">\n            {{ cancelText }}\n          </button>\n          <button app-button block class=\"confirm\" (click)=\"onConfirm($event)\" *ngIf=\"showConfirm\">\n            {{ confirmText }}\n          </button>\n        </div>\n      </div>\n    </div>\n  `\n})\nexport class DialogComponent implements OnInit, OnDestroy {\n  @Input() title?: string;\n  @Input() width?: string | number = 280;\n  @Input() backdropDismiss?= true;\n  @Input() showConfirm?= true;\n  @Input() showCancel?= false;\n  @Input() confirmText?= 'Oui';\n  @Input() cancelText?= 'Non';\n\n  @Output() oninit = new EventEmitter<DialogComponent>();\n  @Output() onconfirm = new EventEmitter<Event>();\n  @Output() oncancel = new EventEmitter<Event>();\n\n  backdropState = false;\n  contentState = false;\n\n  private listener = new Subject<boolean>();\n  private sub = Subscription.EMPTY;\n  private element: Element;\n\n  constructor(private el: ElementRef) {\n    this.element = this.el.nativeElement;\n  }\n\n  ngOnInit() {\n    if (this.width && typeof this.width === 'number') {\n      this.width = this.width + 'px';\n    }\n\n    this.oninit.emit(this);\n    document.body.appendChild(this.element);\n\n    this.sub = this.listen().subscribe(state => {\n      if (state) {\n        this.backdropState = true;\n        setTimeout(() => this.contentState = true, 150);\n      } else {\n        this.contentState = false;\n        setTimeout(() => this.backdropState = false, 300);\n      }\n    });\n  }\n\n  ngOnDestroy() {\n    this.sub.unsubscribe();\n    this.element.remove();\n  }\n\n  listen() {\n    return this.listener.asObservable();\n  }\n\n  open() {\n    this.listener.next(true);\n  }\n\n  close() {\n    this.listener.next(false);\n  }\n\n  backdropClose(event: Event) {\n    const backdrop = this.element.querySelector('.dialog-container');\n\n    if (event.target !== backdrop || !this.backdropDismiss) {\n      return;\n    }\n\n    this.close();\n  }\n\n  onConfirm(event: Event) {\n    if (this.onconfirm.observers.length) {\n      this.onconfirm.emit(event);\n    } else {\n      this.close();\n    }\n  }\n\n  onCancel(event: Event) {\n    if (this.oncancel.observers.length) {\n      this.oncancel.emit(event);\n    } else {\n      this.close();\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}