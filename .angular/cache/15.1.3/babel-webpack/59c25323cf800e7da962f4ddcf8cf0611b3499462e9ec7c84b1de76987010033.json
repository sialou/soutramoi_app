{"ast":null,"code":"export const DEFAULT_GEO_LOCATION = [-3.9655, 5.2834];\nexport const hexToRGB = (hex, alpha = 1) => {\n  const [r, g, b] = hex.match(/\\w\\w/g).map(x => parseInt(x, 16));\n  return `rgba(${r},${g},${b},${alpha})`;\n};\nexport const capitalize = text => text.charAt(0).toUpperCase() + text.slice(1);\nexport const matchValidator = passwords => form => {\n  const password = form.get(passwords[0]).value;\n  const confirm = form.get(passwords[1]).value;\n  if (password === confirm) {\n    return null;\n  }\n  return {\n    match: true\n  };\n};","map":{"version":3,"mappings":"AAGA,OAAO,MAAMA,oBAAoB,GAAe,CAAC,CAAC,MAAM,EAAE,MAAM,CAAC;AAEjE,OAAO,MAAMC,QAAQ,GAAG,CAACC,GAAW,EAAEC,KAAK,GAAG,CAAC,KAAI;EACjD,MAAM,CAACC,CAAC,EAAEC,CAAC,EAAEC,CAAC,CAAC,GAAGJ,GAAG,CAACK,KAAK,CAAC,OAAO,CAAC,CAACC,GAAG,CAACC,CAAC,IAAIC,QAAQ,CAACD,CAAC,EAAE,EAAE,CAAC,CAAC;EAC9D,OAAO,QAAQL,CAAC,IAAIC,CAAC,IAAIC,CAAC,IAAIH,KAAK,GAAG;AACxC,CAAC;AAED,OAAO,MAAMQ,UAAU,GAAIC,IAAY,IAAKA,IAAI,CAACC,MAAM,CAAC,CAAC,CAAC,CAACC,WAAW,EAAE,GAAGF,IAAI,CAACG,KAAK,CAAC,CAAC,CAAC;AAExF,OAAO,MAAMC,cAAc,GAAIC,SAAmB,IAAMC,IAAe,IAAI;EACzE,MAAMC,QAAQ,GAAGD,IAAI,CAACE,GAAG,CAACH,SAAS,CAAC,CAAC,CAAC,CAAC,CAACI,KAAK;EAC7C,MAAMC,OAAO,GAAGJ,IAAI,CAACE,GAAG,CAACH,SAAS,CAAC,CAAC,CAAC,CAAC,CAACI,KAAK;EAE5C,IAAIF,QAAQ,KAAKG,OAAO,EAAE;IACxB,OAAO,IAAI;;EAGb,OAAO;IACLf,KAAK,EAAE;GACR;AACH,CAAC","names":["DEFAULT_GEO_LOCATION","hexToRGB","hex","alpha","r","g","b","match","map","x","parseInt","capitalize","text","charAt","toUpperCase","slice","matchValidator","passwords","form","password","get","value","confirm"],"sourceRoot":"","sources":["/home/digifemmes-22lab149/Bureau/soutramoi_app/src/app/helpers/index.ts"],"sourcesContent":["import { FormGroup } from '@angular/forms';\nimport { LngLatLike } from 'mapbox-gl';\n\nexport const DEFAULT_GEO_LOCATION: LngLatLike = [-3.9655, 5.2834];\n\nexport const hexToRGB = (hex: string, alpha = 1) => {\n  const [r, g, b] = hex.match(/\\w\\w/g).map(x => parseInt(x, 16));\n  return `rgba(${r},${g},${b},${alpha})`;\n};\n\nexport const capitalize = (text: string) => text.charAt(0).toUpperCase() + text.slice(1);\n\nexport const matchValidator = (passwords: string[]) => (form: FormGroup) => {\n  const password = form.get(passwords[0]).value;\n  const confirm = form.get(passwords[1]).value;\n\n  if (password === confirm) {\n    return null;\n  }\n\n  return {\n    match: true,\n  };\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}