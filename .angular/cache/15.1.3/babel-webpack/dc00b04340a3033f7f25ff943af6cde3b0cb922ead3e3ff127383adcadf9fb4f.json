{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport __NG_CLI_RESOURCE__0 from \"./profile-pro-services.component.scss?ngResource\";\nimport { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { FormControl, Validators } from '@angular/forms';\nimport { BehaviorSubject } from 'rxjs';\nimport { AlertService } from 'src/app/services/alert.service';\nlet ProfileProServicesComponent = class ProfileProServicesComponent {\n  constructor(alert) {\n    this.alert = alert;\n    this.valueChange = new EventEmitter();\n    this.maxItem = 10;\n    this.minItem = 1;\n    this.submited = false;\n    this.fields = [];\n    this.items = [];\n    this.state = new BehaviorSubject([]);\n    this.validators = [Validators.required, Validators.minLength(3)];\n    this.subscriptions = [];\n  }\n  ngOnInit() {\n    if (this.payload.services.length) {\n      this.items = this.payload.services;\n      this.items.forEach(i => this.add(i));\n    } else {\n      this.add();\n    }\n    const sub = this.state.asObservable().subscribe(items => {\n      this.valueChange.emit(items);\n    });\n    this.subscriptions.push(sub);\n  }\n  add(value = null) {\n    if (this.fields.length === this.maxItem) {\n      return;\n    }\n    for (const item of this.fields) {\n      if (!item.control.valid) {\n        this.alert.present(`Le service \"${item.control.value}\" n'est pas valide.`);\n        return;\n      }\n    }\n    const name = `service-${this.fields.length + 1}`;\n    const control = new FormControl(value, this.validators);\n    this.fields.push({\n      name,\n      control\n    });\n  }\n  remove(name) {\n    if (this.fields.length === this.minItem) {\n      return;\n    }\n    const items = [];\n    this.fields = this.fields.filter(s => s.name !== name);\n    this.fields.forEach(i => items.push(i.control.value));\n    this.state.next(items);\n  }\n  onBlur(field) {\n    if (field.control.value.length === 0) {\n      this.remove(field.control.value);\n      return;\n    }\n    if (!field.control.valid) {\n      this.alert.present('Le service doit contenir au moins 3 caractÃ¨res');\n      return;\n    }\n    const items = this.state.value;\n    items.push(field.control.value);\n    this.state.next(items);\n  }\n  reset() {\n    this.fields = [];\n    this.add();\n  }\n};\nProfileProServicesComponent.ctorParameters = () => [{\n  type: AlertService\n}];\nProfileProServicesComponent.propDecorators = {\n  valueChange: [{\n    type: Output\n  }],\n  payload: [{\n    type: Input\n  }],\n  maxItem: [{\n    type: Input\n  }],\n  minItem: [{\n    type: Input\n  }]\n};\nProfileProServicesComponent = __decorate([Component({\n  selector: 'profile-pro-services',\n  template: `\n    <div class=\"services-list\">\n      <app-input floatLabel *ngFor=\"let item of fields; let i = index\">\n        <input\n          type=\"text\"\n          [id]=\"'item' + (i+1)\"\n          (blur)=\"onBlur(item)\"\n          [formControl]=\"item.control\"\n          placeholder=\"Entrez un service\"\n          required\n        >\n        <label [for]=\"'item' + (i+1)\">Service {{i + 1}}</label>\n        <button type=\"button\" class=\"remove\" [disabled]=\"i === minItem - 1\" (click)=\"remove(item.name)\">\n          <ion-icon src=\"assets/icons/delete.svg\"></ion-icon>\n        </button>\n      </app-input>\n    </div>\n    <div class=\"services-add\">\n      <button\n        app-button\n        type=\"button\"\n        color=\"secondary\"\n        (click)=\"add()\"\n        [disabled]=\"fields.length === maxItem\"\n      >\n        <ion-icon src=\"assets/icons/cancel.svg\"></ion-icon> Ajouter un service\n      </button>\n    </div>\n  `,\n  styles: [__NG_CLI_RESOURCE__0]\n})], ProfileProServicesComponent);\nexport { ProfileProServicesComponent };","map":{"version":3,"mappings":"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","names":["Component","EventEmitter","Input","Output","FormControl","Validators","BehaviorSubject","AlertService","ProfileProServicesComponent","constructor","alert","required","minLength","ngOnInit","payload","services","length","items","forEach","i","add","sub","state","asObservable","subscribe","valueChange","emit","subscriptions","push","value","fields","maxItem","item","control","valid","present","name","validators","remove","minItem","filter","s","next","onBlur","field","reset","selector","template"],"sourceRoot":"","sources":["/home/digifemmes-22lab149/Bureau/soutramoi_app/src/app/pages/profile-pro/components/profile-pro-services.component.ts"],"sourcesContent":["import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { FormControl, Validators } from '@angular/forms';\nimport { BehaviorSubject, Subscription } from 'rxjs';\n\nimport { AlertService } from 'src/app/services/alert.service';\n\ninterface ServiceItem {\n  name: string;\n  control: FormControl;\n}\n\n@Component({\n  selector: 'profile-pro-services',\n  styleUrls: ['./profile-pro-services.component.scss'],\n  template: `\n    <div class=\"services-list\">\n      <app-input floatLabel *ngFor=\"let item of fields; let i = index\">\n        <input\n          type=\"text\"\n          [id]=\"'item' + (i+1)\"\n          (blur)=\"onBlur(item)\"\n          [formControl]=\"item.control\"\n          placeholder=\"Entrez un service\"\n          required\n        >\n        <label [for]=\"'item' + (i+1)\">Service {{i + 1}}</label>\n        <button type=\"button\" class=\"remove\" [disabled]=\"i === minItem - 1\" (click)=\"remove(item.name)\">\n          <ion-icon src=\"assets/icons/delete.svg\"></ion-icon>\n        </button>\n      </app-input>\n    </div>\n    <div class=\"services-add\">\n      <button\n        app-button\n        type=\"button\"\n        color=\"secondary\"\n        (click)=\"add()\"\n        [disabled]=\"fields.length === maxItem\"\n      >\n        <ion-icon src=\"assets/icons/cancel.svg\"></ion-icon> Ajouter un service\n      </button>\n    </div>\n  `,\n})\nexport class ProfileProServicesComponent implements OnInit {\n  @Output() valueChange = new EventEmitter<string[]>();\n  @Input() payload: ProfessionalData;\n  @Input() maxItem = 10;\n  @Input() minItem = 1;\n\n  submited = false;\n  fields: ServiceItem[] = [];\n  items: string[] = [];\n  state = new BehaviorSubject<string[]>([]);\n\n  readonly validators = [\n    Validators.required,\n    Validators.minLength(3),\n  ];\n\n  private subscriptions: Subscription[] = [];\n\n  constructor(\n    private alert: AlertService,\n  ) { }\n\n  ngOnInit() {\n    if (this.payload.services.length) {\n      this.items = this.payload.services;\n      this.items.forEach(i => this.add(i));\n    } else {\n      this.add();\n    }\n\n    const sub = this.state.asObservable().subscribe(items => {\n      this.valueChange.emit(items);\n    });\n\n    this.subscriptions.push(sub);\n  }\n\n  add(value = null) {\n    if (this.fields.length === this.maxItem) {\n      return;\n    }\n\n    for (const item of this.fields) {\n      if (!item.control.valid) {\n        this.alert.present(`Le service \"${item.control.value}\" n'est pas valide.`);\n        return;\n      }\n    }\n\n    const name = `service-${this.fields.length + 1}`;\n    const control = new FormControl(value, this.validators);\n\n    this.fields.push({ name, control });\n  }\n\n  remove(name: string) {\n    if (this.fields.length === this.minItem) {\n      return;\n    }\n\n    const items: string[] = [];\n\n    this.fields = this.fields.filter(s => s.name !== name);\n    this.fields.forEach(i => items.push(i.control.value));\n    this.state.next(items);\n  }\n\n  onBlur(field: ServiceItem) {\n    if ((field.control.value as string).length === 0) {\n      this.remove(field.control.value);\n      return;\n    }\n\n    if (!field.control.valid) {\n      this.alert.present('Le service doit contenir au moins 3 caractÃ¨res');\n      return;\n    }\n\n    const items = this.state.value;\n\n    items.push(field.control.value);\n    this.state.next(items);\n  }\n\n  reset() {\n    this.fields = [];\n    this.add();\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}