{"ast":null,"code":"import { __awaiter, __decorate } from \"tslib\";\nimport { Injectable, Inject } from '@angular/core';\nimport { Platform } from '@ionic/angular';\nimport { LOCAL_STORAGE } from 'ngx-webstorage-service';\nlet StorageService = class StorageService {\n  constructor(web, plt) {\n    this.web = web;\n    this.plt = plt;\n    this.native = localStorage;\n  }\n  get(key) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (this.plt.is('cordova')) {\n        return JSON.parse(this.native.getItem(key));\n      }\n      return this.web.get(key);\n    });\n  }\n  set(key, value) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (this.plt.is('cordova')) {\n        this.native.removeItem(key);\n        this.native.setItem(key, JSON.stringify(value));\n      } else {\n        this.web.remove(key);\n        this.web.set(key, value);\n      }\n    });\n  }\n  remove(key) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (this.plt.is('cordova')) {\n        this.native.removeItem(key);\n      } else {\n        this.web.remove(key);\n      }\n    });\n  }\n  clear() {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (this.plt.is('cordova')) {\n        this.native.clear();\n      } else {\n        this.web.clear();\n      }\n    });\n  }\n  has(key) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (this.plt.is('cordova')) {\n        const result = JSON.parse(this.native.getItem(key));\n        return result ? true : false;\n      }\n      return this.web.has(key);\n    });\n  }\n  keys() {\n    return __awaiter(this, void 0, void 0, function* () {\n      return null;\n    });\n  }\n};\nStorageService.ctorParameters = () => [{\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [LOCAL_STORAGE]\n  }]\n}, {\n  type: Platform\n}];\nStorageService = __decorate([Injectable({\n  providedIn: 'root'\n})], StorageService);\nexport { StorageService };","map":{"version":3,"mappings":";AAAA,SAASA,UAAU,EAAEC,MAAM,QAAQ,eAAe;AAClD,SAASC,QAAQ,QAAQ,gBAAgB;AACzC,SAASC,aAAa,QAAsC,wBAAwB;AAK7E,IAAMC,cAAc,GAApB,MAAMA,cAAc;EAGzBC,YACiCC,GAAe,EACtCC,GAAa;IADU,QAAG,GAAHD,GAAG;IAC1B,QAAG,GAAHC,GAAG;IAJI,WAAM,GAAGC,YAAY;EAKlC;EAEEC,GAAG,CAACC,GAAW;;MACnB,IAAI,IAAI,CAACH,GAAG,CAACI,EAAE,CAAC,SAAS,CAAC,EAAE;QAC1B,OAAOC,IAAI,CAACC,KAAK,CAAC,IAAI,CAACC,MAAM,CAACC,OAAO,CAACL,GAAG,CAAC,CAAC;;MAG7C,OAAO,IAAI,CAACJ,GAAG,CAACG,GAAG,CAACC,GAAG,CAAC;IAC1B,CAAC;;EAEKM,GAAG,CAACN,GAAW,EAAEO,KAAU;;MAC/B,IAAI,IAAI,CAACV,GAAG,CAACI,EAAE,CAAC,SAAS,CAAC,EAAE;QAC1B,IAAI,CAACG,MAAM,CAACI,UAAU,CAACR,GAAG,CAAC;QAC3B,IAAI,CAACI,MAAM,CAACK,OAAO,CAACT,GAAG,EAAEE,IAAI,CAACQ,SAAS,CAACH,KAAK,CAAC,CAAC;OAChD,MAAM;QACL,IAAI,CAACX,GAAG,CAACe,MAAM,CAACX,GAAG,CAAC;QACpB,IAAI,CAACJ,GAAG,CAACU,GAAG,CAACN,GAAG,EAAEO,KAAK,CAAC;;IAE5B,CAAC;;EAEKI,MAAM,CAACX,GAAW;;MACtB,IAAI,IAAI,CAACH,GAAG,CAACI,EAAE,CAAC,SAAS,CAAC,EAAE;QAC1B,IAAI,CAACG,MAAM,CAACI,UAAU,CAACR,GAAG,CAAC;OAC5B,MAAM;QACL,IAAI,CAACJ,GAAG,CAACe,MAAM,CAACX,GAAG,CAAC;;IAExB,CAAC;;EAEKY,KAAK;;MACT,IAAI,IAAI,CAACf,GAAG,CAACI,EAAE,CAAC,SAAS,CAAC,EAAE;QAC1B,IAAI,CAACG,MAAM,CAACQ,KAAK,EAAE;OACpB,MAAM;QACL,IAAI,CAAChB,GAAG,CAACgB,KAAK,EAAE;;IAEpB,CAAC;;EAEKC,GAAG,CAACb,GAAW;;MACnB,IAAI,IAAI,CAACH,GAAG,CAACI,EAAE,CAAC,SAAS,CAAC,EAAE;QAC1B,MAAMa,MAAM,GAAGZ,IAAI,CAACC,KAAK,CAAC,IAAI,CAACC,MAAM,CAACC,OAAO,CAACL,GAAG,CAAC,CAAC;QACnD,OAAOc,MAAM,GAAG,IAAI,GAAG,KAAK;;MAG9B,OAAO,IAAI,CAAClB,GAAG,CAACiB,GAAG,CAACb,GAAG,CAAC;IAC1B,CAAC;;EAEKe,IAAI;;MACR,OAAO,IAAI;IACb,CAAC;;;;;;UAjDExB,MAAM;IAAAyB,OAACvB,aAAa;EAAA;AAAA;;;AAJZC,cAAc,eAH1BJ,UAAU,CAAC;EACV2B,UAAU,EAAE;CACb,CAAC,GACWvB,cAAc,CAsD1B;SAtDYA,cAAc","names":["Injectable","Inject","Platform","LOCAL_STORAGE","StorageService","constructor","web","plt","localStorage","get","key","is","JSON","parse","native","getItem","set","value","removeItem","setItem","stringify","remove","clear","has","result","keys","args","providedIn"],"sourceRoot":"","sources":["/home/digifemmes-22lab149/Bureau/soutramoi_app/src/app/services/storage.service.ts"],"sourcesContent":["import { Injectable, Inject } from '@angular/core';\nimport { Platform } from '@ionic/angular';\nimport { LOCAL_STORAGE, StorageService as NgxStorage } from 'ngx-webstorage-service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class StorageService {\n  private readonly native = localStorage;\n\n  constructor(\n    @Inject(LOCAL_STORAGE) private web: NgxStorage,\n    private plt: Platform\n  ) { }\n\n  async get(key: string) {\n    if (this.plt.is('cordova')) {\n      return JSON.parse(this.native.getItem(key));\n    }\n\n    return this.web.get(key);\n  }\n\n  async set(key: string, value: any) {\n    if (this.plt.is('cordova')) {\n      this.native.removeItem(key);\n      this.native.setItem(key, JSON.stringify(value));\n    } else {\n      this.web.remove(key);\n      this.web.set(key, value);\n    }\n  }\n\n  async remove(key: string) {\n    if (this.plt.is('cordova')) {\n      this.native.removeItem(key);\n    } else {\n      this.web.remove(key);\n    }\n  }\n\n  async clear() {\n    if (this.plt.is('cordova')) {\n      this.native.clear();\n    } else {\n      this.web.clear();\n    }\n  }\n\n  async has(key: string) {\n    if (this.plt.is('cordova')) {\n      const result = JSON.parse(this.native.getItem(key));\n      return result ? true : false;\n    }\n\n    return this.web.has(key);\n  }\n\n  async keys() {\n    return null;\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}