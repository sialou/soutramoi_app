{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport __NG_CLI_RESOURCE__0 from \"./profile-password.component.scss?ngResource\";\nimport { Component, EventEmitter, Input, Output, ViewChild } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { SwalPortalTargets } from '@sweetalert2/ngx-sweetalert2';\nimport { css } from '@emotion/css';\nimport { from } from 'rxjs';\nimport { matchValidator } from 'src/app/helpers';\nimport { fadeTransition } from 'src/app/animations';\nimport { AlertService } from 'src/app/services/alert.service';\nimport { HttpService } from 'src/app/services/http.service';\nimport { AppService } from 'src/app/services/app.service';\nlet ProfilePasswordComponent = class ProfilePasswordComponent {\n  constructor(swalTargets, app, alert, http) {\n    this.swalTargets = swalTargets;\n    this.app = app;\n    this.alert = alert;\n    this.http = http;\n    this.valueChange = new EventEmitter();\n    this.loading = false;\n    this.customClass = {};\n    this.styles = {\n      portal: css`\n      position: relative;\n    `,\n      popup: css`\n      width: 80% !important;\n    `,\n      cancelContainer: css`\n      text-align: center;\n    `,\n      cancel: css`\n      display: inline-block;\n      margin-top: 15px;\n      padding: 8px 20px;\n      width: auto;\n      height: auto;\n      background: transparent;\n      border: none;\n      color: rgba(var(--ion-color-secondary-rgb), 0.5);\n    `,\n      info: css`\n      margin-top: 5px;\n      margin-bottom: 20px;\n      text-align: center;\n      color: var(--ion-color-medium-shade);\n      opacity: 0.6;\n      font-size: 14px;\n      font-weight: 400;\n      line-height: 1.3;\n    `,\n      loading: css`\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      flex-direction: column;\n      position: absolute;\n      top: 0;\n      left: 0;\n      right: 0;\n      bottom: 0;\n      background-color: #FFFFFF;\n    `,\n      loadingMessage: css`\n      margin-top: 20px;\n      text-align: center;\n      font-size: 14px;\n      font-weight: 500;\n    `\n    };\n    this.subscriptions = [];\n    this.customClass.popup = this.styles.popup;\n    this.form = new FormGroup({\n      password: new FormControl('', [Validators.required, Validators.minLength(8)]),\n      passwordConfirm: new FormControl('', [Validators.required, Validators.minLength(8)])\n    }, {\n      validators: [matchValidator(['password', 'passwordConfirm'])]\n    });\n  }\n  ngOnDestroy() {\n    this.subscriptions.forEach(sub => sub.unsubscribe());\n  }\n  submit() {\n    if (!this.form.valid) {\n      return;\n    }\n    const {\n      password\n    } = this.form.value;\n    const {\n      id_token\n    } = this.user;\n    const body = {\n      password,\n      id_token\n    };\n    this.loading = true;\n    const sub = from(this.http.post('/me/password', body)).subscribe({\n      next: user => {\n        this.loading = false;\n        this.valueChange.emit(user);\n        this.form.reset();\n        this.alert.present('Mot de passe mis à jour');\n      },\n      error: err => {\n        const text = this.app.handlingError(err, false);\n        this.loading = false;\n        this.alert.present({\n          text,\n          allowOutsideClick: false,\n          confirmButtonText: 'Réessayer'\n        }).then(result => {\n          if (result.isConfirmed) {\n            this.modal.fire();\n          }\n        });\n      }\n    });\n    this.subscriptions.push(sub);\n  }\n};\nProfilePasswordComponent.ctorParameters = () => [{\n  type: SwalPortalTargets\n}, {\n  type: AppService\n}, {\n  type: AlertService\n}, {\n  type: HttpService\n}];\nProfilePasswordComponent.propDecorators = {\n  modal: [{\n    type: ViewChild,\n    args: ['modal']\n  }],\n  valueChange: [{\n    type: Output\n  }],\n  user: [{\n    type: Input\n  }]\n};\nProfilePasswordComponent = __decorate([Component({\n  selector: 'profile-password',\n  animations: [fadeTransition],\n  template: `\n    <div class=\"app-card\">\n      <app-list-item\n        [svgIcon]=\"'lock'\"\n        [title]=\"'Mot de passe'\"\n        [subTitle]=\"'Mètre à jour le mot de passe'\"\n        (click)=\"modal.fire()\"\n      ></app-list-item>\n    </div>\n\n    <swal\n      #modal\n      title=\"Nouveau mot de passe\"\n      [heightAuto]=\"false\"\n      [showConfirmButton]=\"false\"\n      [allowOutsideClick]=\"false\"\n      [customClass]=\"customClass\"\n    >\n      <section *swalPortal=\"swalTargets.confirmButton\" [class]=\"styles.portal\">\n        <form [formGroup]=\"form\" (ngSubmit)=\"submit()\" novalidate>\n          <p [class]=\"styles.info\">Au moins 8 caractères minimum, une lettre majuscule et un caractère spéciale.</p>\n          <app-input-password [toggleVisibility]=\"true\">\n            <input type=\"password\" placeholder=\"Mot de passe\" formControlName=\"password\">\n          </app-input-password>\n          <app-input-password [toggleVisibility]=\"true\">\n            <input type=\"password\" placeholder=\"Confirmer le mot de passe\" formControlName=\"passwordConfirm\">\n          </app-input-password>\n          <button type=\"submit\" app-button color=\"secondary\" [disabled]=\"!form.valid\">Mèttre à jour</button>\n          <div [class]=\"styles.cancelContainer\">\n            <button type=\"button\" (click)=\"modal.close()\" [class]=\"styles.cancel\">Annuler</button>\n          </div>\n        </form>\n        <div @FadeTransition [class]=\"styles.loading\" *ngIf=\"loading\">\n          <app-spinner-infinity\n            [width]=\"100\"\n            [secondaryColor]=\"'rgba(var(--ion-color-primary-rgb),0.15)'\"\n          ></app-spinner-infinity>\n          <div [class]=\"styles.loadingMessage\">Mise à jour en cours...</div>\n        </div>\n      </section>\n    </swal>\n  `,\n  styles: [__NG_CLI_RESOURCE__0]\n})], ProfilePasswordComponent);\nexport { ProfilePasswordComponent };","map":{"version":3,"mappings":"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","names":["Component","EventEmitter","Input","Output","ViewChild","FormControl","FormGroup","Validators","SwalPortalTargets","css","from","matchValidator","fadeTransition","AlertService","HttpService","AppService","ProfilePasswordComponent","constructor","swalTargets","app","alert","http","portal","popup","cancelContainer","cancel","info","loading","loadingMessage","customClass","styles","form","password","required","minLength","passwordConfirm","validators","ngOnDestroy","subscriptions","forEach","sub","unsubscribe","submit","valid","value","id_token","user","body","post","subscribe","next","valueChange","emit","reset","present","error","err","text","handlingError","allowOutsideClick","confirmButtonText","then","result","isConfirmed","modal","fire","push","args","selector","animations","template"],"sourceRoot":"","sources":["/home/digifemmes-22lab149/Bureau/soutramoi_app/src/app/pages/tabs/profile/components/profile-password.component.ts"],"sourcesContent":["import { Component, EventEmitter, Input, OnDestroy, Output, ViewChild } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { SwalPortalTargets, SwalComponent } from '@sweetalert2/ngx-sweetalert2';\nimport { css } from '@emotion/css';\nimport { from, Subscription } from 'rxjs';\n\nimport { matchValidator } from 'src/app/helpers';\nimport { fadeTransition } from 'src/app/animations';\nimport { AlertService } from 'src/app/services/alert.service';\nimport { HttpService } from 'src/app/services/http.service';\nimport { AppService } from 'src/app/services/app.service';\n\n@Component({\n  selector: 'profile-password',\n  styleUrls: ['./profile-password.component.scss'],\n  animations: [fadeTransition],\n  template: `\n    <div class=\"app-card\">\n      <app-list-item\n        [svgIcon]=\"'lock'\"\n        [title]=\"'Mot de passe'\"\n        [subTitle]=\"'Mètre à jour le mot de passe'\"\n        (click)=\"modal.fire()\"\n      ></app-list-item>\n    </div>\n\n    <swal\n      #modal\n      title=\"Nouveau mot de passe\"\n      [heightAuto]=\"false\"\n      [showConfirmButton]=\"false\"\n      [allowOutsideClick]=\"false\"\n      [customClass]=\"customClass\"\n    >\n      <section *swalPortal=\"swalTargets.confirmButton\" [class]=\"styles.portal\">\n        <form [formGroup]=\"form\" (ngSubmit)=\"submit()\" novalidate>\n          <p [class]=\"styles.info\">Au moins 8 caractères minimum, une lettre majuscule et un caractère spéciale.</p>\n          <app-input-password [toggleVisibility]=\"true\">\n            <input type=\"password\" placeholder=\"Mot de passe\" formControlName=\"password\">\n          </app-input-password>\n          <app-input-password [toggleVisibility]=\"true\">\n            <input type=\"password\" placeholder=\"Confirmer le mot de passe\" formControlName=\"passwordConfirm\">\n          </app-input-password>\n          <button type=\"submit\" app-button color=\"secondary\" [disabled]=\"!form.valid\">Mèttre à jour</button>\n          <div [class]=\"styles.cancelContainer\">\n            <button type=\"button\" (click)=\"modal.close()\" [class]=\"styles.cancel\">Annuler</button>\n          </div>\n        </form>\n        <div @FadeTransition [class]=\"styles.loading\" *ngIf=\"loading\">\n          <app-spinner-infinity\n            [width]=\"100\"\n            [secondaryColor]=\"'rgba(var(--ion-color-primary-rgb),0.15)'\"\n          ></app-spinner-infinity>\n          <div [class]=\"styles.loadingMessage\">Mise à jour en cours...</div>\n        </div>\n      </section>\n    </swal>\n  `,\n})\nexport class ProfilePasswordComponent implements OnDestroy {\n  @ViewChild('modal') readonly modal!: SwalComponent;\n\n  @Output() valueChange = new EventEmitter<any>();\n  @Input() user: User;\n\n  form: FormGroup;\n  loading = false;\n  customClass: any = {};\n\n  styles = {\n    portal: css`\n      position: relative;\n    `,\n    popup: css`\n      width: 80% !important;\n    `,\n    cancelContainer: css`\n      text-align: center;\n    `,\n    cancel: css`\n      display: inline-block;\n      margin-top: 15px;\n      padding: 8px 20px;\n      width: auto;\n      height: auto;\n      background: transparent;\n      border: none;\n      color: rgba(var(--ion-color-secondary-rgb), 0.5);\n    `,\n    info: css`\n      margin-top: 5px;\n      margin-bottom: 20px;\n      text-align: center;\n      color: var(--ion-color-medium-shade);\n      opacity: 0.6;\n      font-size: 14px;\n      font-weight: 400;\n      line-height: 1.3;\n    `,\n    loading: css`\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      flex-direction: column;\n      position: absolute;\n      top: 0;\n      left: 0;\n      right: 0;\n      bottom: 0;\n      background-color: #FFFFFF;\n    `,\n    loadingMessage: css`\n      margin-top: 20px;\n      text-align: center;\n      font-size: 14px;\n      font-weight: 500;\n    `,\n  };\n\n  private subscriptions: Subscription[] = [];\n\n  constructor(\n    public readonly swalTargets: SwalPortalTargets,\n    private app: AppService,\n    private alert: AlertService,\n    private http: HttpService,\n  ) {\n    this.customClass.popup = this.styles.popup;\n\n    this.form = new FormGroup({\n      password: new FormControl('', [\n        Validators.required,\n        Validators.minLength(8),\n      ]),\n      passwordConfirm: new FormControl('', [\n        Validators.required,\n        Validators.minLength(8),\n      ]),\n    }, {\n      validators: [\n        matchValidator(['password', 'passwordConfirm']),\n      ],\n    });\n  }\n\n  ngOnDestroy() {\n    this.subscriptions.forEach(sub => sub.unsubscribe());\n  }\n\n  submit() {\n    if (!this.form.valid) {\n      return;\n    }\n\n    const { password } = this.form.value;\n    const { id_token } = this.user;\n    const body = { password, id_token };\n\n    this.loading = true;\n\n    const sub = from(this.http.post('/me/password', body)).subscribe({\n      next: (user: User) => {\n        this.loading = false;\n        this.valueChange.emit(user);\n\n        this.form.reset();\n        this.alert.present('Mot de passe mis à jour');\n      },\n      error: (err) => {\n        const text = this.app.handlingError(err, false);\n        this.loading = false;\n\n        this.alert.present({ text, allowOutsideClick: false, confirmButtonText: 'Réessayer' }).then(result => {\n          if (result.isConfirmed) {\n            this.modal.fire();\n          }\n        });\n      }\n    });\n\n    this.subscriptions.push(sub);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}