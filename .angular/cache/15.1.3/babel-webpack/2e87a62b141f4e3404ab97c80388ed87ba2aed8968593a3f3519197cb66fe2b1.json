{"ast":null,"code":"import { __awaiter, __decorate } from \"tslib\";\nimport { Injectable } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { Network } from '@capacitor/network';\nexport var NetworkState;\n(function (NetworkState) {\n  NetworkState[NetworkState[\"on\"] = 0] = \"on\";\n  NetworkState[NetworkState[\"off\"] = 1] = \"off\";\n})(NetworkState || (NetworkState = {}));\nlet NetworkService = class NetworkService {\n  constructor() {\n    this.state = NetworkState.off;\n    this.status = new Subject();\n    this.init();\n  }\n  /**\n   * Check network state\n   */\n  is(state) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const status = yield Network.getStatus();\n      const currentState = status.connected ? NetworkState.on : NetworkState.off;\n      const checker = state === 'online' ? NetworkState.on : NetworkState.off;\n      return currentState === checker;\n    });\n  }\n  /**\n   * Listen network state\n   */\n  listen() {\n    return this.status.asObservable();\n  }\n  /**\n   * Get network state\n   */\n  getState() {\n    return this.state;\n  }\n  init() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const status = yield Network.getStatus();\n      this.handle(status);\n      Network.addListener('networkStatusChange', s => this.handle(s));\n    });\n  }\n  handle(status) {\n    this.state = status.connected ? NetworkState.on : NetworkState.off;\n    this.status.next(this.state);\n  }\n};\nNetworkService.ctorParameters = () => [];\nNetworkService = __decorate([Injectable({\n  providedIn: 'root'\n})], NetworkService);\nexport { NetworkService };","map":{"version":3,"mappings":";AAAA,SAASA,UAAU,QAAQ,eAAe;AAC1C,SAASC,OAAO,QAAQ,MAAM;AAE9B,SAA2BC,OAAO,QAAQ,oBAAoB;AAE9D,WAAYC,YAAwB;AAApC,WAAYA,YAAY;EAAGA,2CAAE;EAAEA,6CAAG;AAAC,CAAC,EAAxBA,YAAY,KAAZA,YAAY;AAKjB,IAAMC,cAAc,GAApB,MAAMA,cAAc;EAIzBC;IAFQ,UAAK,GAAGF,YAAY,CAACG,GAAG;IAG9B,IAAI,CAACC,MAAM,GAAG,IAAIN,OAAO,EAAE;IAC3B,IAAI,CAACO,IAAI,EAAE;EACb;EAEA;;;EAGMC,EAAE,CAACC,KAA2B;;MAClC,MAAMH,MAAM,GAAG,MAAML,OAAO,CAACS,SAAS,EAAE;MACxC,MAAMC,YAAY,GAAGL,MAAM,CAACM,SAAS,GAAGV,YAAY,CAACW,EAAE,GAAGX,YAAY,CAACG,GAAG;MAC1E,MAAMS,OAAO,GAAGL,KAAK,KAAK,QAAQ,GAAGP,YAAY,CAACW,EAAE,GAAGX,YAAY,CAACG,GAAG;MAEvE,OAAOM,YAAY,KAAKG,OAAO;IACjC,CAAC;;EAED;;;EAGAC,MAAM;IACJ,OAAO,IAAI,CAACT,MAAM,CAACU,YAAY,EAAE;EACnC;EAEA;;;EAGAC,QAAQ;IACN,OAAO,IAAI,CAACR,KAAK;EACnB;EAEcF,IAAI;;MAChB,MAAMD,MAAM,GAAG,MAAML,OAAO,CAACS,SAAS,EAAE;MAExC,IAAI,CAACQ,MAAM,CAACZ,MAAM,CAAC;MACnBL,OAAO,CAACkB,WAAW,CAAC,qBAAqB,EAAEC,CAAC,IAAI,IAAI,CAACF,MAAM,CAACE,CAAC,CAAC,CAAC;IACjE,CAAC;;EAEOF,MAAM,CAACZ,MAAwB;IACrC,IAAI,CAACG,KAAK,GAAGH,MAAM,CAACM,SAAS,GAAGV,YAAY,CAACW,EAAE,GAAGX,YAAY,CAACG,GAAG;IAClE,IAAI,CAACC,MAAM,CAACe,IAAI,CAAC,IAAI,CAACZ,KAAK,CAAC;EAC9B;;;AA5CWN,cAAc,eAH1BJ,UAAU,CAAC;EACVuB,UAAU,EAAE;CACb,CAAC,GACWnB,cAAc,CA6C1B;SA7CYA,cAAc","names":["Injectable","Subject","Network","NetworkState","NetworkService","constructor","off","status","init","is","state","getStatus","currentState","connected","on","checker","listen","asObservable","getState","handle","addListener","s","next","providedIn"],"sourceRoot":"","sources":["/home/digifemmes-22lab149/Bureau/soutramoi_app/src/app/services/network.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Subject } from 'rxjs';\n\nimport { ConnectionStatus, Network } from '@capacitor/network';\n\nexport enum NetworkState { on, off }\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NetworkService {\n  private status: Subject<NetworkState>;\n  private state = NetworkState.off;\n\n  constructor() {\n    this.status = new Subject();\n    this.init();\n  }\n\n  /**\n   * Check network state\n   */\n  async is(state: 'online' | 'offline') {\n    const status = await Network.getStatus();\n    const currentState = status.connected ? NetworkState.on : NetworkState.off;\n    const checker = state === 'online' ? NetworkState.on : NetworkState.off;\n\n    return currentState === checker;\n  }\n\n  /**\n   * Listen network state\n   */\n  listen() {\n    return this.status.asObservable();\n  }\n\n  /**\n   * Get network state\n   */\n  getState() {\n    return this.state;\n  }\n\n  private async init() {\n    const status = await Network.getStatus();\n\n    this.handle(status);\n    Network.addListener('networkStatusChange', s => this.handle(s));\n  }\n\n  private handle(status: ConnectionStatus) {\n    this.state = status.connected ? NetworkState.on : NetworkState.off;\n    this.status.next(this.state);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}