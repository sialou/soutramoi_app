{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport __NG_CLI_RESOURCE__0 from \"./switch.component.scss?ngResource\";\nimport { Component, ElementRef, EventEmitter, Input, Output } from '@angular/core';\nlet SwitchComponent = class SwitchComponent {\n  constructor(elm) {\n    this.elm = elm;\n    this.values = [true, null, false];\n    this.labels = ['Vrai', 'Null', 'Faux'];\n    this.disabled = false;\n    this.valueChange = new EventEmitter();\n  }\n  ngOnInit() {\n    if (this.values.length === 0) {\n      throw new Error('No values provided');\n    }\n    if (this.labels.length !== this.values.length) {\n      throw new Error('Labels and values must have the same length');\n    }\n    if (this.initial) {\n      this.current = this.initial;\n    } else {\n      this.current = this.values[0];\n    }\n    this.backup = this.current;\n    this.elm.nativeElement.style.setProperty('--switch-items', this.values.length.toString());\n    this.handleMove(this.current);\n  }\n  change(value) {\n    if (value === this.current) {\n      return;\n    }\n    this.backup = this.current;\n    this.current = value;\n    this.handleMove(value);\n    this.valueChange.emit(value);\n  }\n  restore() {\n    const value = this.backup;\n    this.current = value;\n    this.handleMove(value);\n  }\n  handleMove(value) {\n    if (value === this.values[0]) {\n      this.move = `translateX(0)`;\n    } else {\n      this.move = `translateX(calc((100% * ${this.values.indexOf(value)}) + 4px))`;\n    }\n  }\n};\nSwitchComponent.ctorParameters = () => [{\n  type: ElementRef\n}];\nSwitchComponent.propDecorators = {\n  initial: [{\n    type: Input\n  }],\n  values: [{\n    type: Input\n  }],\n  labels: [{\n    type: Input\n  }],\n  disabled: [{\n    type: Input\n  }],\n  valueChange: [{\n    type: Output\n  }]\n};\nSwitchComponent = __decorate([Component({\n  selector: 'app-switch',\n  template: `\n    <div class=\"inner\" [class.disabled]=\"disabled\">\n      <ng-container *ngFor=\"let item of values; let i = index\">\n        <div class=\"item\" (click)=\"change(values[i])\" [class.active]=\"values[i] === current\">\n          {{ labels[i] }}\n        </div>\n      </ng-container>\n    </div>\n    <div class=\"handler\" [style.transform]=\"move\"></div>\n  `,\n  styles: [__NG_CLI_RESOURCE__0]\n})], SwitchComponent);\nexport { SwitchComponent };","map":{"version":3,"mappings":";;AAAA,SAASA,SAAS,EAAEC,UAAU,EAAEC,YAAY,EAAEC,KAAK,EAAUC,MAAM,QAAQ,eAAe;AAgBnF,IAAMC,eAAe,GAArB,MAAMA,eAAe;EAW1BC,YAAoBC,GAAe;IAAf,QAAG,GAAHA,GAAG;IATd,WAAM,GAAU,CAAC,IAAI,EAAE,IAAI,EAAE,KAAK,CAAC;IACnC,WAAM,GAAa,CAAC,MAAM,EAAE,MAAM,EAAE,MAAM,CAAC;IAC3C,aAAQ,GAAG,KAAK;IACf,gBAAW,GAAG,IAAIL,YAAY,EAAO;EAMR;EAEvCM,QAAQ;IACN,IAAI,IAAI,CAACC,MAAM,CAACC,MAAM,KAAK,CAAC,EAAE;MAC5B,MAAM,IAAIC,KAAK,CAAC,oBAAoB,CAAC;;IAGvC,IAAI,IAAI,CAACC,MAAM,CAACF,MAAM,KAAK,IAAI,CAACD,MAAM,CAACC,MAAM,EAAE;MAC7C,MAAM,IAAIC,KAAK,CAAC,6CAA6C,CAAC;;IAGhE,IAAI,IAAI,CAACE,OAAO,EAAE;MAChB,IAAI,CAACC,OAAO,GAAG,IAAI,CAACD,OAAO;KAC5B,MAAM;MACL,IAAI,CAACC,OAAO,GAAG,IAAI,CAACL,MAAM,CAAC,CAAC,CAAC;;IAG/B,IAAI,CAACM,MAAM,GAAG,IAAI,CAACD,OAAO;IAE1B,IAAI,CAACP,GAAG,CAACS,aAAa,CAACC,KAAK,CAACC,WAAW,CAAC,gBAAgB,EAAE,IAAI,CAACT,MAAM,CAACC,MAAM,CAACS,QAAQ,EAAE,CAAC;IACzF,IAAI,CAACC,UAAU,CAAC,IAAI,CAACN,OAAO,CAAC;EAC/B;EAEAO,MAAM,CAACC,KAAU;IACf,IAAIA,KAAK,KAAK,IAAI,CAACR,OAAO,EAAE;MAC1B;;IAGF,IAAI,CAACC,MAAM,GAAG,IAAI,CAACD,OAAO;IAC1B,IAAI,CAACA,OAAO,GAAGQ,KAAK;IACpB,IAAI,CAACF,UAAU,CAACE,KAAK,CAAC;IACtB,IAAI,CAACC,WAAW,CAACC,IAAI,CAACF,KAAK,CAAC;EAC9B;EAEAG,OAAO;IACL,MAAMH,KAAK,GAAG,IAAI,CAACP,MAAM;IAEzB,IAAI,CAACD,OAAO,GAAGQ,KAAK;IACpB,IAAI,CAACF,UAAU,CAACE,KAAK,CAAC;EACxB;EAEQF,UAAU,CAACE,KAAU;IAC3B,IAAIA,KAAK,KAAK,IAAI,CAACb,MAAM,CAAC,CAAC,CAAC,EAAE;MAC5B,IAAI,CAACiB,IAAI,GAAG,eAAe;KAC5B,MAAM;MACL,IAAI,CAACA,IAAI,GAAG,2BAA2B,IAAI,CAACjB,MAAM,CAACkB,OAAO,CAACL,KAAK,CAAC,WAAW;;EAEhF;;;;;;;UAzDCnB;EAAK;;UACLA;EAAK;;UACLA;EAAK;;UACLA;EAAK;;UACLC;EAAM;;AALIC,eAAe,eAd3BL,SAAS,CAAC;EACT4B,QAAQ,EAAE,YAAY;EAEtBC,QAAQ,EAAE;;;;;;;;;GAST;;CACF,CAAC,GACWxB,eAAe,CA2D3B;SA3DYA,eAAe","names":["Component","ElementRef","EventEmitter","Input","Output","SwitchComponent","constructor","elm","ngOnInit","values","length","Error","labels","initial","current","backup","nativeElement","style","setProperty","toString","handleMove","change","value","valueChange","emit","restore","move","indexOf","selector","template"],"sourceRoot":"","sources":["/home/digifemmes-22lab149/Bureau/soutramoi_app/src/app/shared/switch/switch.component.ts"],"sourcesContent":["import { Component, ElementRef, EventEmitter, Input, OnInit, Output } from '@angular/core';\n\n@Component({\n  selector: 'app-switch',\n  styleUrls: ['./switch.component.scss'],\n  template: `\n    <div class=\"inner\" [class.disabled]=\"disabled\">\n      <ng-container *ngFor=\"let item of values; let i = index\">\n        <div class=\"item\" (click)=\"change(values[i])\" [class.active]=\"values[i] === current\">\n          {{ labels[i] }}\n        </div>\n      </ng-container>\n    </div>\n    <div class=\"handler\" [style.transform]=\"move\"></div>\n  `,\n})\nexport class SwitchComponent implements OnInit {\n  @Input() initial: any;\n  @Input() values: any[] = [true, null, false];\n  @Input() labels: string[] = ['Vrai', 'Null', 'Faux'];\n  @Input() disabled = false;\n  @Output() valueChange = new EventEmitter<any>();\n\n  backup: any;\n  current: any;\n  move: string;\n\n  constructor(private elm: ElementRef) { }\n\n  ngOnInit() {\n    if (this.values.length === 0) {\n      throw new Error('No values provided');\n    }\n\n    if (this.labels.length !== this.values.length) {\n      throw new Error('Labels and values must have the same length');\n    }\n\n    if (this.initial) {\n      this.current = this.initial;\n    } else {\n      this.current = this.values[0];\n    }\n\n    this.backup = this.current;\n\n    this.elm.nativeElement.style.setProperty('--switch-items', this.values.length.toString());\n    this.handleMove(this.current);\n  }\n\n  change(value: any) {\n    if (value === this.current) {\n      return;\n    }\n\n    this.backup = this.current;\n    this.current = value;\n    this.handleMove(value);\n    this.valueChange.emit(value);\n  }\n\n  restore() {\n    const value = this.backup;\n\n    this.current = value;\n    this.handleMove(value);\n  }\n\n  private handleMove(value: any) {\n    if (value === this.values[0]) {\n      this.move = `translateX(0)`;\n    } else {\n      this.move = `translateX(calc((100% * ${this.values.indexOf(value)}) + 4px))`;\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}