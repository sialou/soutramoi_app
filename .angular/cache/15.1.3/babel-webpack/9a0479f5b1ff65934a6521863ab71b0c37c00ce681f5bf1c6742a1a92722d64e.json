{"ast":null,"code":"import { __awaiter, __decorate } from \"tslib\";\n/* eslint-disable @typescript-eslint/naming-convention */\nimport { Injectable } from '@angular/core';\nimport { getAuth, sendEmailVerification, sendPasswordResetEmail, signInWithCredential, signInWithEmailAndPassword, signInWithPopup, updatePassword, createUserWithEmailAndPassword, signInAnonymously, signInWithPhoneNumber, linkWithCredential } from '@angular/fire/auth';\nimport { Subject } from 'rxjs';\nimport { StorageService } from './storage.service';\nimport { HttpService } from './http.service';\nimport { HttpClient } from '@angular/common/http';\nlet AuthService = class AuthService {\n  constructor(http, httpClient, storage) {\n    this.http = http;\n    this.httpClient = httpClient;\n    this.storage = storage;\n    this.key = 'soutramoi_auth';\n    this.TokenKey = 'soutramoi_auth_token';\n    this.TokenHeaderName = 'X-Auth-Token';\n    this.providerKey = 'soutramoi_auth_provider';\n    this.state = new Subject();\n    this.auth.languageCode = 'fr';\n  }\n  get auth() {\n    const auth = getAuth();\n    auth.languageCode = 'fr';\n    return auth;\n  }\n  isLogged() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const user = yield this.getUser();\n      return user !== null && user !== undefined;\n    });\n  }\n  /**\n   * Listen for auth state changes\n   */\n  listen() {\n    return this.state.asObservable();\n  }\n  /**\n   * Sign in anonymously\n   */\n  anonymous() {\n    return new Promise((resolve, reject) => {\n      signInAnonymously(this.auth).then(res => resolve(res.user), reject);\n    });\n  }\n  /**\n   * Sign in with credential\n   */\n  signInWithCredential(credential) {\n    return new Promise((resolve, reject) => {\n      signInWithCredential(this.auth, credential).then(r => resolve(r.user), reject);\n    });\n  }\n  /**\n   * Sign in with credential\n   */\n  linkWithCredential(credential) {\n    const user = this.auth.currentUser;\n    return new Promise((resolve, reject) => {\n      linkWithCredential(user, credential).then(r => resolve(r.user), reject);\n    });\n  }\n  /**\n   * Sign in with custom provider (Google | Facebook | Apple | ...)\n   */\n  signInWithProvider(provider) {\n    return new Promise((resolve, reject) => {\n      signInWithPopup(this.auth, provider).then(r => resolve(r.user), reject);\n    });\n  }\n  signInWithPhoneNumber(phoneNumber, appVerifier) {\n    return new Promise((resolve, reject) => {\n      signInWithPhoneNumber(this.auth, phoneNumber, appVerifier).then(r => resolve(r), reject);\n    });\n  }\n  /**\n   * Sign in with email and password\n   */\n  signIn(email, password) {\n    return new Promise((resolve, reject) => {\n      signInWithEmailAndPassword(this.auth, email, password).then(r => resolve(r.user), reject);\n    });\n  }\n  /**\n   * Create a new user with email and password\n   */\n  signUp(email, password) {\n    return new Promise((resolve, reject) => {\n      createUserWithEmailAndPassword(this.auth, email, password).then(r => resolve(r.user), reject);\n    });\n  }\n  /**\n   * Send email verfificaiton\n   */\n  sendEmailVerification() {\n    const user = this.currentUser();\n    return sendEmailVerification(user);\n  }\n  /**\n   * Reset Forggot password\n   */\n  forgotPassword(email) {\n    return new Promise((resolve, reject) => {\n      sendPasswordResetEmail(this.auth, email).then(resolve, reject);\n    });\n  }\n  /**\n   * Update password for current user\n   */\n  updatePassword(oldPassword, password) {\n    return new Promise((resolve, reject) => {\n      signInWithEmailAndPassword(this.auth, this.currentUser().email, oldPassword).then(res => {\n        updatePassword(res.user, password).then(resolve, reject);\n      }).catch(reject);\n    });\n  }\n  /**\n   * Get the current user\n   */\n  currentUser() {\n    return this.auth.currentUser;\n  }\n  /**\n   * Sign out current user\n   */\n  signOut() {\n    return this.auth.signOut();\n  }\n  getIdToken() {\n    return this.currentUser().getIdToken();\n  }\n  login(data) {\n    return this.http.post('/auth/login', data, {\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded'\n      }\n    });\n  }\n  register(data) {\n    return this.http.post('/auth/register', data, {\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded'\n      }\n    });\n  }\n  provider(data) {\n    return this.http.post('/auth/provider', data, {\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded'\n      }\n    });\n  }\n  me() {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.httpClient.get('/me');\n    });\n  }\n  setUser(user) {\n    return this.storage.set(this.key, user);\n  }\n  getUser() {\n    return __awaiter(this, void 0, void 0, function* () {\n      return yield this.storage.get(this.key);\n    });\n  }\n  getToken() {\n    return __awaiter(this, void 0, void 0, function* () {\n      console.log(yield this.storage.get('soutramoi_auth_token'));\n      return yield this.storage.get(this.TokenKey);\n    });\n  }\n  logout() {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (this.currentUser() !== null) {\n        yield this.signOut();\n      }\n      yield this.storage.remove(this.key);\n      yield this.storage.remove(this.TokenKey);\n    });\n  }\n};\nAuthService.ctorParameters = () => [{\n  type: HttpService\n}, {\n  type: HttpClient\n}, {\n  type: StorageService\n}];\nAuthService = __decorate([Injectable({\n  providedIn: 'root'\n})], AuthService);\nexport { AuthService };","map":{"version":3,"mappings":"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","names":["Injectable","getAuth","sendEmailVerification","sendPasswordResetEmail","signInWithCredential","signInWithEmailAndPassword","signInWithPopup","updatePassword","createUserWithEmailAndPassword","signInAnonymously","signInWithPhoneNumber","linkWithCredential","Subject","StorageService","HttpService","HttpClient","AuthService","constructor","http","httpClient","storage","auth","languageCode","isLogged","user","getUser","undefined","listen","state","asObservable","anonymous","Promise","resolve","reject","then","res","credential","r","currentUser","signInWithProvider","provider","phoneNumber","appVerifier","signIn","email","password","signUp","forgotPassword","oldPassword","catch","signOut","getIdToken","login","data","post","headers","register","me","get","setUser","set","key","getToken","console","log","TokenKey","logout","remove","providedIn"],"sourceRoot":"","sources":["/home/digifemmes-22lab149/Bureau/soutramoi_app/src/app/services/auth.service.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/naming-convention */\nimport { Injectable } from '@angular/core';\nimport {\n  User as FirebaseUser,\n  AuthCredential,\n  AuthProvider,\n  getAuth,\n  sendEmailVerification,\n  sendPasswordResetEmail,\n  signInWithCredential,\n  signInWithEmailAndPassword,\n  signInWithPopup,\n  updatePassword,\n  createUserWithEmailAndPassword,\n  signInAnonymously,\n  signInWithPhoneNumber,\n  linkWithCredential,\n} from '@angular/fire/auth';\nimport { Subject } from 'rxjs';\n\nimport { StorageService } from './storage.service';\nimport { HttpService } from './http.service';\nimport { HttpClient } from '@angular/common/http';\n\nexport interface User {\n  id: number;\n  created_at: string;\n  updated_at?: string;\n  name: string;\n  email: string;\n  email_verified: boolean;\n  phone: string;\n  phone_verified: boolean;\n  gender?: 'male' | 'female';\n  photo_url: string;\n  cover_url: string;\n  city: AppLocation;\n  town: AppLocation;\n  provider?: string;\n  provider_id?: null;\n  id_token?: string;\n}\n\nexport interface UserPayload {\n  uid: string;\n  displayName: string;\n  email: string;\n  photoURL: string;\n  emailVerified: boolean;\n  provider: string;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  readonly key = 'soutramoi_auth';\n  readonly TokenKey = 'soutramoi_auth_token';\n  readonly TokenHeaderName = 'X-Auth-Token';\n  readonly providerKey = 'soutramoi_auth_provider';\n\n  private state = new Subject<User>();\n\n  constructor(\n    private http: HttpService,\n    private httpClient: HttpClient,\n    private storage: StorageService,\n  ) {\n    this.auth.languageCode = 'fr';\n  }\n\n  private get auth() {\n    const auth = getAuth();\n    auth.languageCode = 'fr';\n\n    return auth;\n  }\n\n  async isLogged() {\n    const user = await this.getUser();\n    return user !== null && user !== undefined;\n  }\n\n  /**\n   * Listen for auth state changes\n   */\n  listen() {\n    return this.state.asObservable();\n  }\n\n  /**\n   * Sign in anonymously\n   */\n  anonymous() {\n    return new Promise((resolve: (user: FirebaseUser) => void, reject) => {\n      signInAnonymously(this.auth).then(res => resolve(res.user), reject);\n    });\n  }\n\n  /**\n   * Sign in with credential\n   */\n  signInWithCredential(credential: AuthCredential) {\n    return new Promise((resolve: (user: FirebaseUser) => void, reject) => {\n      signInWithCredential(this.auth, credential).then(r => resolve(r.user), reject);\n    });\n  }\n\n  /**\n   * Sign in with credential\n   */\n  linkWithCredential(credential: AuthCredential) {\n    const user = this.auth.currentUser;\n\n    return new Promise((resolve: (user: FirebaseUser) => void, reject) => {\n      linkWithCredential(user, credential).then(r => resolve(r.user), reject);\n    });\n  }\n\n  /**\n   * Sign in with custom provider (Google | Facebook | Apple | ...)\n   */\n  signInWithProvider(provider: AuthProvider) {\n    return new Promise((resolve: (user: FirebaseUser) => void, reject) => {\n      signInWithPopup(this.auth, provider).then(r => resolve(r.user), reject);\n    });\n  }\n\n  signInWithPhoneNumber(phoneNumber: string, appVerifier: any) {\n    return new Promise((resolve: (result) => void, reject) => {\n      signInWithPhoneNumber(this.auth, phoneNumber, appVerifier).then(r => resolve(r), reject);\n    });\n  }\n\n  /**\n   * Sign in with email and password\n   */\n  signIn(email: string, password: string) {\n    return new Promise((resolve: (user: FirebaseUser) => void, reject) => {\n      signInWithEmailAndPassword(this.auth, email, password).then(r => resolve(r.user), reject);\n    });\n  }\n\n  /**\n   * Create a new user with email and password\n   */\n  signUp(email: string, password: string) {\n    return new Promise((resolve: (user: FirebaseUser) => void, reject) => {\n      createUserWithEmailAndPassword(this.auth, email, password).then(r => resolve(r.user), reject);\n    });\n  }\n\n  /**\n   * Send email verfificaiton\n   */\n  sendEmailVerification() {\n    const user = this.currentUser();\n    return sendEmailVerification(user);\n  }\n\n  /**\n   * Reset Forggot password\n   */\n  forgotPassword(email: string): Promise<void> {\n    return new Promise((resolve: () => void, reject) => {\n      sendPasswordResetEmail(this.auth, email).then(resolve, reject);\n    });\n  }\n\n  /**\n   * Update password for current user\n   */\n  updatePassword(oldPassword: string, password: string): Promise<void> {\n    return new Promise((resolve: () => void, reject) => {\n      signInWithEmailAndPassword(this.auth, this.currentUser().email, oldPassword).then(res => {\n        updatePassword(res.user, password).then(resolve, reject);\n      }).catch(reject);\n    });\n  }\n\n  /**\n   * Get the current user\n   */\n  currentUser() {\n    return this.auth.currentUser;\n  }\n\n  /**\n   * Sign out current user\n   */\n  signOut() {\n    return this.auth.signOut();\n  }\n\n  getIdToken() {\n    return this.currentUser().getIdToken();\n  }\n\n  login(data: any) {\n    return this.http.post('/auth/login', data, {\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded',\n      },\n    });\n  }\n\n  register(data: any) {\n    return this.http.post('/auth/register', data, {\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded',\n      },\n    });\n  }\n\n  provider(data: any) {\n    return this.http.post('/auth/provider', data, {\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded',\n      },\n    });\n  }\n\n  async me() {\n    return this.httpClient.get<User>('/me');\n  }\n\n  setUser(user: User) {\n    return this.storage.set(this.key, user);\n  }\n\n  async getUser() {\n    return (await this.storage.get(this.key)) as User;\n  }\n\n  async getToken() {\n    console.log(await this.storage.get('soutramoi_auth_token'));\n    return (await this.storage.get(this.TokenKey)) as string;\n  }\n\n  async logout() {\n    if (this.currentUser() !== null) {\n      await this.signOut();\n    }\n\n    await this.storage.remove(this.key);\n    await this.storage.remove(this.TokenKey);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}