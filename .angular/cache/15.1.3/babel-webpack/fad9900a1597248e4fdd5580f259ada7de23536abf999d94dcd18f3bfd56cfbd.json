{"ast":null,"code":"import { __awaiter, __decorate } from \"tslib\";\nimport { Injectable } from '@angular/core';\nimport { Platform } from '@ionic/angular';\nimport { Subject } from 'rxjs';\nimport { AlertService } from './alert.service';\nimport { LoaderService } from './loader.service';\nimport { StorageService } from './storage.service';\nlet AppService = class AppService {\n  constructor(platform, alert, loader, storage) {\n    this.platform = platform;\n    this.alert = alert;\n    this.loader = loader;\n    this.storage = storage;\n    this.settingsKey = 'soutramoi_settings';\n    this.errorMessage = 'Erreur survenue, réessayer plus tard.';\n    this.defaultSettings = {\n      theme: 'light',\n      notifications: true\n    };\n    this.settingsStatus = new Subject();\n  }\n  listenSettings() {\n    return this.settingsStatus.asObservable();\n  }\n  getSettings() {\n    return __awaiter(this, void 0, void 0, function* () {\n      let settings = yield this.storage.get(this.settingsKey);\n      if (!settings) {\n        settings = this.defaultSettings;\n        yield this.storage.set(this.settingsKey, settings);\n      }\n      return settings;\n    });\n  }\n  setSettings(settings) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.storage.set(this.settingsKey, settings);\n      this.settingsStatus.next(settings);\n    });\n  }\n  handlingError(response, popup = true) {\n    let error = response;\n    if (typeof response.error !== 'undefined') {\n      error = response.error;\n    }\n    if (!this.platform.is('hybrid')) {\n      console.error('Error', error);\n    }\n    let message;\n    if (error.code && error.message) {\n      message = this.getErrorMessage(error);\n    } else {\n      message = error.message ? error.message : this.errorMessage;\n      switch (message) {\n        case 'Something went wrong':\n          message = this.errorMessage;\n          break;\n      }\n    }\n    if (popup) {\n      this.loader.dismiss().then(() => this.alert.present(message));\n    }\n    return message;\n  }\n  getErrorMessage(error) {\n    let message;\n    switch (error.code) {\n      case 'auth/user-not-found':\n        message = 'Il n\\'y a pas d\\'utilisateur correspondant à cet identifiant. Le compte a peut-être été supprimé.';\n        break;\n      case 'auth/wrong-password':\n        message = 'Le mot de passe n\\'est pas valide ou votre compte n\\'a pas de mot de passe.';\n        break;\n      case 'auth/network-request-failed':\n        message = 'Erreur de connexion. Veuillez vous connecter à internet et réessayer.';\n        break;\n      case 'auth/email-already-in-use':\n        message = 'L\\'adresse email est déjà utilisée par un autre compte.';\n        break;\n      case 'auth/account-exists-with-different-credential':\n        message = 'Un compte existe déjà avec la même adresse email mais des informations de connexion différentes. Connectez-vous à l\\'aide d\\'un fournisseur associé à cette adresse e-mail.';\n        break;\n      case 'auth/popup-closed-by-user':\n        message = 'Vous avez fermé la fenêtre de connexion avant de finaliser l\\'opération. Veuillez réessayer à nouveau.';\n        break;\n      case 'auth/internal-error':\n        message = this.errorMessage;\n        break;\n      default:\n        message = error.message;\n        break;\n    }\n    return message;\n  }\n};\nAppService.ctorParameters = () => [{\n  type: Platform\n}, {\n  type: AlertService\n}, {\n  type: LoaderService\n}, {\n  type: StorageService\n}];\nAppService = __decorate([Injectable({\n  providedIn: 'root'\n})], AppService);\nexport { AppService };","map":{"version":3,"mappings":"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","names":["Injectable","Platform","Subject","AlertService","LoaderService","StorageService","AppService","constructor","platform","alert","loader","storage","theme","notifications","listenSettings","settingsStatus","asObservable","getSettings","settings","get","settingsKey","defaultSettings","set","setSettings","next","handlingError","response","popup","error","is","console","message","code","getErrorMessage","errorMessage","dismiss","then","present","providedIn"],"sourceRoot":"","sources":["/home/digifemmes-22lab149/Bureau/soutramoi_app/src/app/services/app.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Platform } from '@ionic/angular';\nimport { Subject } from 'rxjs';\n\nimport { AlertService } from './alert.service';\nimport { LoaderService } from './loader.service';\nimport { StorageService } from './storage.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AppService {\n  readonly settingsKey = 'soutramoi_settings';\n  readonly errorMessage = 'Erreur survenue, réessayer plus tard.';\n  readonly defaultSettings: Settings = {\n    theme: 'light',\n    notifications: true,\n  };\n\n  private settingsStatus = new Subject<Settings>();\n\n  constructor(\n    private platform: Platform,\n    private alert: AlertService,\n    private loader: LoaderService,\n    private storage: StorageService,\n  ) { }\n\n  listenSettings() {\n    return this.settingsStatus.asObservable();\n  }\n\n  async getSettings() {\n    let settings: Settings = await this.storage.get(this.settingsKey);\n\n    if (!settings) {\n      settings = this.defaultSettings;\n      await this.storage.set(this.settingsKey, settings);\n    }\n\n    return settings;\n  }\n\n  async setSettings(settings: Settings) {\n    await this.storage.set(this.settingsKey, settings);\n    this.settingsStatus.next(settings);\n  }\n\n  handlingError(response, popup = true) {\n    let error = response;\n\n    if (typeof response.error !== 'undefined') {\n      error = response.error;\n    }\n\n    if (!this.platform.is('hybrid')) {\n      console.error('Error', error);\n    }\n\n    let message: string;\n\n    if (error.code && error.message) {\n      message = this.getErrorMessage(error);\n    } else {\n      message = error.message ? error.message : this.errorMessage;\n\n      switch (message) {\n        case 'Something went wrong':\n          message = this.errorMessage;\n          break;\n      }\n    }\n\n    if (popup) {\n      this.loader.dismiss().then(() => this.alert.present(message));\n    }\n\n    return message;\n  }\n\n  getErrorMessage(error: any) {\n    let message: string;\n\n    switch (error.code) {\n      case 'auth/user-not-found':\n        message = 'Il n\\'y a pas d\\'utilisateur correspondant à cet identifiant. Le compte a peut-être été supprimé.';\n        break;\n      case 'auth/wrong-password':\n        message = 'Le mot de passe n\\'est pas valide ou votre compte n\\'a pas de mot de passe.';\n        break;\n      case 'auth/network-request-failed':\n        message = 'Erreur de connexion. Veuillez vous connecter à internet et réessayer.';\n        break;\n      case 'auth/email-already-in-use':\n        message = 'L\\'adresse email est déjà utilisée par un autre compte.';\n        break;\n      case 'auth/account-exists-with-different-credential':\n        message = 'Un compte existe déjà avec la même adresse email mais des informations de connexion différentes. Connectez-vous à l\\'aide d\\'un fournisseur associé à cette adresse e-mail.';\n        break;\n      case 'auth/popup-closed-by-user':\n        message = 'Vous avez fermé la fenêtre de connexion avant de finaliser l\\'opération. Veuillez réessayer à nouveau.';\n        break;\n      case 'auth/internal-error':\n        message = this.errorMessage;\n        break;\n      default:\n        message = error.message;\n        break;\n    }\n\n    return message;\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}