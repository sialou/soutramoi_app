{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Injectable } from '@angular/core';\nimport axios from 'axios';\nimport { environment } from 'src/environments/environment';\nlet HttpService = class HttpService {\n  constructor() {\n    const instance = axios.create();\n    instance.defaults.baseURL = environment.apiUrl.trim();\n    instance.defaults.headers.common.Accept = 'application/json';\n    // instance.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded';\n    // instance.defaults.headers.common['Authorization'] = `Bearer ${CONFIG.AUTHORIZATION_TOKEN}`;\n    this.client = instance;\n  }\n  get(url, options) {\n    const req = this.client.get(url, options);\n    return this.parseRequest(req);\n  }\n  post(url, params, options) {\n    params = params ? this.parse(params) : {};\n    const req = this.client.post(url, params, options);\n    return this.parseRequest(req);\n  }\n  put(url, params, options) {\n    params = params ? this.parse(params) : {};\n    const req = this.client.put(url, params, options);\n    return this.parseRequest(req);\n  }\n  delete(url, options) {\n    const req = this.client.delete(url, options);\n    return this.parseRequest(req);\n  }\n  parseRequest(req) {\n    return new Promise((resolve, reject) => {\n      req.then(res => resolve(res.data)).catch(error => {\n        if (error.response) {\n          reject(error.response.data);\n        } else if (error.request) {\n          reject(error.request);\n        } else {\n          reject(error);\n        }\n      });\n    });\n  }\n  parse(object) {\n    const formData = new FormData();\n    Object.keys(object).forEach(key => formData.append(key, object[key]));\n    return formData;\n  }\n};\nHttpService.ctorParameters = () => [];\nHttpService = __decorate([Injectable({\n  providedIn: 'root'\n})], HttpService);\nexport { HttpService };","map":{"version":3,"mappings":";AAAA,SAASA,UAAU,QAAQ,eAAe;AAC1C,OAAOC,KAA4C,MAAM,OAAO;AAEhE,SAASC,WAAW,QAAQ,8BAA8B;AAOnD,IAAMC,WAAW,GAAjB,MAAMA,WAAW;EAGtBC;IACE,MAAMC,QAAQ,GAAGJ,KAAK,CAACK,MAAM,EAAE;IAE/BD,QAAQ,CAACE,QAAQ,CAACC,OAAO,GAAGN,WAAW,CAACO,MAAM,CAACC,IAAI,EAAE;IACrDL,QAAQ,CAACE,QAAQ,CAACI,OAAO,CAACC,MAAM,CAACC,MAAM,GAAG,kBAAkB;IAC5D;IACA;IAEA,IAAI,CAACC,MAAM,GAAGT,QAAQ;EACxB;EAEAU,GAAG,CAACC,GAAW,EAAEC,OAAqB;IACpC,MAAMC,GAAG,GAAG,IAAI,CAACJ,MAAM,CAACC,GAAG,CAACC,GAAG,EAAEC,OAAO,CAAC;IACzC,OAAO,IAAI,CAACE,YAAY,CAACD,GAAG,CAAC;EAC/B;EAEAE,IAAI,CAACJ,GAAW,EAAEK,MAAO,EAAEJ,OAAqB;IAC9CI,MAAM,GAAGA,MAAM,GAAG,IAAI,CAACC,KAAK,CAACD,MAAM,CAAC,GAAG,EAAE;IACzC,MAAMH,GAAG,GAAG,IAAI,CAACJ,MAAM,CAACM,IAAI,CAACJ,GAAG,EAAEK,MAAM,EAAEJ,OAAO,CAAC;IAElD,OAAO,IAAI,CAACE,YAAY,CAACD,GAAG,CAAC;EAC/B;EAEAK,GAAG,CAACP,GAAW,EAAEK,MAAO,EAAEJ,OAAqB;IAC7CI,MAAM,GAAGA,MAAM,GAAG,IAAI,CAACC,KAAK,CAACD,MAAM,CAAC,GAAG,EAAE;IACzC,MAAMH,GAAG,GAAG,IAAI,CAACJ,MAAM,CAACS,GAAG,CAACP,GAAG,EAAEK,MAAM,EAAEJ,OAAO,CAAC;IAEjD,OAAO,IAAI,CAACE,YAAY,CAACD,GAAG,CAAC;EAC/B;EAEAM,MAAM,CAACR,GAAW,EAAEC,OAAqB;IACvC,MAAMC,GAAG,GAAG,IAAI,CAACJ,MAAM,CAACU,MAAM,CAACR,GAAG,EAAEC,OAAO,CAAC;IAC5C,OAAO,IAAI,CAACE,YAAY,CAACD,GAAG,CAAC;EAC/B;EAEQC,YAAY,CAACD,GAAiB;IACpC,OAAO,IAAIO,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAI;MACrCT,GAAG,CAACU,IAAI,CAACC,GAAG,IAAIH,OAAO,CAACG,GAAG,CAACC,IAAI,CAAC,CAAC,CAACC,KAAK,CAACC,KAAK,IAAG;QAC/C,IAAIA,KAAK,CAACC,QAAQ,EAAE;UAClBN,MAAM,CAACK,KAAK,CAACC,QAAQ,CAACH,IAAI,CAAC;SAC5B,MAAM,IAAIE,KAAK,CAACE,OAAO,EAAE;UACxBP,MAAM,CAACK,KAAK,CAACE,OAAO,CAAC;SACtB,MAAM;UACLP,MAAM,CAACK,KAAK,CAAC;;MAEjB,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ;EAEQV,KAAK,CAACa,MAA8B;IAC1C,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,EAAE;IAC/BC,MAAM,CAACC,IAAI,CAACJ,MAAM,CAAC,CAACK,OAAO,CAACC,GAAG,IAAIL,QAAQ,CAACM,MAAM,CAACD,GAAG,EAAEN,MAAM,CAACM,GAAG,CAAC,CAAC,CAAC;IAErE,OAAOL,QAAQ;EACjB;;;AAzDWjC,WAAW,eAHvBH,UAAU,CAAC;EACV2C,UAAU,EAAE;CACb,CAAC,GACWxC,WAAW,CA0DvB;SA1DYA,WAAW","names":["Injectable","axios","environment","HttpService","constructor","instance","create","defaults","baseURL","apiUrl","trim","headers","common","Accept","client","get","url","options","req","parseRequest","post","params","parse","put","delete","Promise","resolve","reject","then","res","data","catch","error","response","request","object","formData","FormData","Object","keys","forEach","key","append","providedIn"],"sourceRoot":"","sources":["/home/digifemmes-22lab149/Bureau/soutramoi_app/src/app/services/http.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport axios, { AxiosRequestConfig, AxiosInstance } from 'axios';\n\nimport { environment } from 'src/environments/environment';\n\nexport type HttpOptions = AxiosRequestConfig;\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class HttpService {\n  private client: AxiosInstance;\n\n  constructor() {\n    const instance = axios.create();\n\n    instance.defaults.baseURL = environment.apiUrl.trim();\n    instance.defaults.headers.common.Accept = 'application/json';\n    // instance.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded';\n    // instance.defaults.headers.common['Authorization'] = `Bearer ${CONFIG.AUTHORIZATION_TOKEN}`;\n\n    this.client = instance;\n  }\n\n  get(url: string, options?: HttpOptions) {\n    const req = this.client.get(url, options);\n    return this.parseRequest(req);\n  }\n\n  post(url: string, params?, options?: HttpOptions) {\n    params = params ? this.parse(params) : {};\n    const req = this.client.post(url, params, options);\n\n    return this.parseRequest(req);\n  }\n\n  put(url: string, params?, options?: HttpOptions) {\n    params = params ? this.parse(params) : {};\n    const req = this.client.put(url, params, options);\n\n    return this.parseRequest(req);\n  }\n\n  delete(url: string, options?: HttpOptions) {\n    const req = this.client.delete(url, options);\n    return this.parseRequest(req);\n  }\n\n  private parseRequest(req: Promise<any>): Promise<any> {\n    return new Promise((resolve, reject) => {\n      req.then(res => resolve(res.data)).catch(error => {\n        if (error.response) {\n          reject(error.response.data);\n        } else if (error.request) {\n          reject(error.request);\n        } else {\n          reject(error);\n        }\n      });\n    });\n  }\n\n  private parse(object: { [key: string]: any }) {\n    const formData = new FormData();\n    Object.keys(object).forEach(key => formData.append(key, object[key]));\n\n    return formData;\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}