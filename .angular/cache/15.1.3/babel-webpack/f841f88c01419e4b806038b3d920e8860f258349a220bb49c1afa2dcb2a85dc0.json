{"ast":null,"code":"import { __awaiter, __decorate } from \"tslib\";\nimport { Injectable } from '@angular/core';\nimport { environment } from 'src/environments/environment';\nimport { AuthService } from 'src/app/services/auth.service';\nimport { from, lastValueFrom } from 'rxjs';\nlet ApiInterceptor = class ApiInterceptor {\n  constructor(auth) {\n    this.auth = auth;\n  }\n  intercept(req, next) {\n    return from(this.handle(req, next));\n  }\n  handle(req, next) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const token = yield this.auth.getToken();\n      const clone = req.clone({\n        url: environment.apiUrl.trim() + req.url,\n        setHeaders: {\n          'Accept': 'application/json'\n        }\n      });\n      console.log('token', token);\n      if (typeof token !== 'undefined') {\n        clone.headers.set(this.auth.TokenHeaderName, token);\n      }\n      return yield lastValueFrom(next.handle(clone));\n    });\n  }\n};\nApiInterceptor.ctorParameters = () => [{\n  type: AuthService\n}];\nApiInterceptor = __decorate([Injectable()], ApiInterceptor);\nexport { ApiInterceptor };","map":{"version":3,"mappings":";AAAA,SAASA,UAAU,QAAQ,eAAe;AAG1C,SAASC,WAAW,QAAQ,8BAA8B;AAC1D,SAASC,WAAW,QAAQ,+BAA+B;AAC3D,SAASC,IAAI,EAAEC,aAAa,QAAQ,MAAM;AAGnC,IAAMC,cAAc,GAApB,MAAMA,cAAc;EACzBC,YACUC,IAAiB;IAAjB,SAAI,GAAJA,IAAI;EACV;EAEJC,SAAS,CAACC,GAAqB,EAAEC,IAAiB;IAChD,OAAOP,IAAI,CAAC,IAAI,CAACQ,MAAM,CAACF,GAAG,EAAEC,IAAI,CAAC,CAAC;EACrC;EAEMC,MAAM,CAACF,GAAqB,EAAEC,IAAiB;;MACnD,MAAME,KAAK,GAAG,MAAM,IAAI,CAACL,IAAI,CAACM,QAAQ,EAAE;MAExC,MAAMC,KAAK,GAAGL,GAAG,CAACK,KAAK,CAAC;QACtBC,GAAG,EAAEd,WAAW,CAACe,MAAM,CAACC,IAAI,EAAE,GAAGR,GAAG,CAACM,GAAG;QACxCG,UAAU,EAAE;UACV,QAAQ,EAAE;;OAEb,CAAC;MAEFC,OAAO,CAACC,GAAG,CAAC,OAAO,EAAER,KAAK,CAAC;MAE3B,IAAI,OAAOA,KAAK,KAAK,WAAW,EAAE;QAChCE,KAAK,CAACO,OAAO,CAACC,GAAG,CAAC,IAAI,CAACf,IAAI,CAACgB,eAAe,EAAEX,KAAK,CAAC;;MAGrD,OAAO,MAAMR,aAAa,CAACM,IAAI,CAACC,MAAM,CAACG,KAAK,CAAC,CAAC;IAChD,CAAC;;;;;;AA1BUT,cAAc,eAD1BL,UAAU,EAAE,GACAK,cAAc,CA2B1B;SA3BYA,cAAc","names":["Injectable","environment","AuthService","from","lastValueFrom","ApiInterceptor","constructor","auth","intercept","req","next","handle","token","getToken","clone","url","apiUrl","trim","setHeaders","console","log","headers","set","TokenHeaderName"],"sourceRoot":"","sources":["/home/digifemmes-22lab149/Bureau/soutramoi_app/src/app/helpers/api.interceptor.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpInterceptor, HttpHandler, HttpRequest } from '@angular/common/http';\n\nimport { environment } from 'src/environments/environment';\nimport { AuthService } from 'src/app/services/auth.service';\nimport { from, lastValueFrom } from 'rxjs';\n\n@Injectable()\nexport class ApiInterceptor implements HttpInterceptor {\n  constructor(\n    private auth: AuthService,\n  ) { }\n\n  intercept(req: HttpRequest<any>, next: HttpHandler) {\n    return from(this.handle(req, next));\n  }\n\n  async handle(req: HttpRequest<any>, next: HttpHandler) {\n    const token = await this.auth.getToken();\n\n    const clone = req.clone({\n      url: environment.apiUrl.trim() + req.url,\n      setHeaders: {\n        'Accept': 'application/json',\n      },\n    });\n\n    console.log('token', token);\n\n    if (typeof token !== 'undefined') {\n      clone.headers.set(this.auth.TokenHeaderName, token);\n    }\n\n    return await lastValueFrom(next.handle(clone));\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}