{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport __NG_CLI_RESOURCE__0 from \"./profile-card-item.component.scss?ngResource\";\nimport { Component, EventEmitter, Input, Output, ViewChild } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { BehaviorSubject } from 'rxjs';\nimport { fadeTransition } from 'src/app/animations';\nlet ProfileCardItemComponent = class ProfileCardItemComponent {\n  constructor() {\n    this.listen = new EventEmitter();\n    this.valueChange = new EventEmitter();\n    this.value = null;\n    this.name = null;\n    this.inputValidators = [];\n    this.state = new BehaviorSubject('initial');\n    this.subscriptions = [];\n  }\n  ngOnInit() {\n    if (this.inputType === 'select' && !this.inputSelectOptions) {\n      throw new Error('inputSelectOptions is required for select input');\n    }\n    if (this.submit && !this.slug) {\n      throw new Error('slug is required when submit is defined');\n    }\n    this.name = this.resolveName(this.value);\n    if (!this.input) {\n      this.input = new FormControl(this.value, this.inputValidators || []);\n    } else {\n      this.input.setValue(this.value);\n      if (this.inputValidators.length > 0) {\n        this.input.setValidators(this.inputValidators);\n      }\n    }\n    const sub = this.state.subscribe(state => this.listen.emit(state));\n    this.subscriptions.push(sub);\n  }\n  ngOnDestroy() {\n    this.subscriptions.forEach(sub => sub.unsubscribe());\n  }\n  edit() {\n    this.state.next('edit');\n    setTimeout(() => this.bindInput(), 200);\n  }\n  done(value) {\n    this.state.next('done');\n    this.value = value;\n    this.name = this.resolveName(value);\n  }\n  bindInput() {\n    if (!this.inputElm) {\n      return;\n    }\n    const inputField = this.inputElm.nativeElement;\n    if (this.inputType !== 'select') {\n      inputField.focus();\n    }\n    if (this.inputMode) {\n      inputField.setAttribute('inputmode', this.inputMode);\n    }\n    if (this.inputPattern) {\n      inputField.setAttribute('pattern', this.inputPattern);\n    }\n    if (this.inputMaxLength) {\n      inputField.setAttribute('maxlength', this.inputMaxLength.toString());\n    }\n    if (this.inputMinLength) {\n      inputField.setAttribute('minlength', this.inputMinLength.toString());\n    }\n  }\n  resolveName(value) {\n    if (this.inputType === 'select') {\n      const item = this.inputSelectOptions.find(i => i.value === value);\n      return item ? item.name : null;\n    } else {\n      return value;\n    }\n  }\n};\nProfileCardItemComponent.propDecorators = {\n  inputElm: [{\n    type: ViewChild,\n    args: ['inputElm']\n  }],\n  listen: [{\n    type: Output\n  }],\n  valueChange: [{\n    type: Output\n  }],\n  value: [{\n    type: Input\n  }],\n  name: [{\n    type: Input\n  }],\n  label: [{\n    type: Input\n  }],\n  input: [{\n    type: Input\n  }],\n  inputType: [{\n    type: Input\n  }],\n  inputMode: [{\n    type: Input\n  }],\n  inputPattern: [{\n    type: Input\n  }],\n  inputMaxLength: [{\n    type: Input\n  }],\n  inputMinLength: [{\n    type: Input\n  }],\n  inputSelectOptions: [{\n    type: Input\n  }],\n  inputValidators: [{\n    type: Input\n  }],\n  submit: [{\n    type: Input\n  }],\n  slug: [{\n    type: Input\n  }]\n};\nProfileCardItemComponent = __decorate([Component({\n  selector: 'profile-card-item',\n  animations: [fadeTransition],\n  template: `\n    <div class=\"inner\">\n      <div class=\"info\" @FadeTransition *ngIf=\"state.value !== 'edit'\">\n        <div class=\"text\">\n          <div class=\"label\" *ngIf=\"label\">{{label}}</div>\n          <div class=\"name\" *ngIf=\"name\">\n            {{ inputType === 'email' ? name : name | capitalize }}\n          </div>\n        </div>\n        <div class=\"actions\">\n          <button @FadeTransition type=\"button\" class=\"action\" (click)=\"edit()\" *ngIf=\"state.value === 'initial'\">\n            <ion-icon src=\"assets/icons/pencil.svg\"></ion-icon>\n          </button>\n          <div class=\"action loader\" @FadeTransition *ngIf=\"state.value === 'loading'\"></div>\n          <div class=\"action done\" @FadeTransition *ngIf=\"state.value === 'done'\">\n            <ion-icon src=\"assets/icons/check-circle.svg\"></ion-icon>\n          </div>\n          <div class=\"action error\" @FadeTransition *ngIf=\"state.value === 'error'\">\n            <ion-icon src=\"assets/icons/cancel.svg\"></ion-icon>\n          </div>\n        </div>\n      </div>\n      <div class=\"input\" @FadeTransition *ngIf=\"state.value === 'edit'\">\n        <ng-container *ngIf=\"inputType !== 'select'\">\n          <input #inputElm [type]=\"inputType || 'text'\" [placeholder]=\"label || 'Saisir une valeur'\" [formControl]=\"input\">\n        </ng-container>\n        <ng-container *ngIf=\"inputType === 'select'\">\n          <select [name]=\"slug\" [formControl]=\"input\">\n            <option [ngValue]=\"null\" disabled>\n              {{label || 'SÃ©lectionner une valeur'}}\n            </option>\n            <option *ngFor=\"let item of inputSelectOptions\" [ngValue]=\"item.value\">\n              {{item.name}}\n            </option>\n          </select>\n        </ng-container>\n        <button type=\"button\" (click)=\"valueChange.emit(input.value)\" [disabled]=\"input.value === value || !input.valid\">\n          <ion-icon src=\"assets/icons/check.svg\"></ion-icon>\n        </button>\n      </div>\n    </div>\n  `,\n  styles: [__NG_CLI_RESOURCE__0]\n})], ProfileCardItemComponent);\nexport { ProfileCardItemComponent };","map":{"version":3,"mappings":"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","names":["Component","EventEmitter","Input","Output","ViewChild","FormControl","BehaviorSubject","fadeTransition","ProfileCardItemComponent","constructor","ngOnInit","inputType","inputSelectOptions","Error","submit","slug","name","resolveName","value","input","inputValidators","setValue","length","setValidators","sub","state","subscribe","listen","emit","subscriptions","push","ngOnDestroy","forEach","unsubscribe","edit","next","setTimeout","bindInput","done","inputElm","inputField","nativeElement","focus","inputMode","setAttribute","inputPattern","inputMaxLength","toString","inputMinLength","item","find","i","args","selector","animations","template"],"sourceRoot":"","sources":["/home/digifemmes-22lab149/Bureau/soutramoi_app/src/app/pages/tabs/profile/components/profile-card-item.component.ts"],"sourcesContent":["import { Component, EventEmitter, Input, OnDestroy, OnInit, Output, ViewChild } from '@angular/core';\nimport { FormControl, ValidatorFn } from '@angular/forms';\nimport { BehaviorSubject, Subscription } from 'rxjs';\n\nimport { fadeTransition } from 'src/app/animations';\n\ntype ItemState = 'initial' | 'edit' | 'loading' | 'done' | 'error';\n\ninterface ItemSelectOption {\n  name: string;\n  value: any;\n}\n\n@Component({\n  selector: 'profile-card-item',\n  animations: [fadeTransition],\n  styleUrls: ['./profile-card-item.component.scss'],\n  template: `\n    <div class=\"inner\">\n      <div class=\"info\" @FadeTransition *ngIf=\"state.value !== 'edit'\">\n        <div class=\"text\">\n          <div class=\"label\" *ngIf=\"label\">{{label}}</div>\n          <div class=\"name\" *ngIf=\"name\">\n            {{ inputType === 'email' ? name : name | capitalize }}\n          </div>\n        </div>\n        <div class=\"actions\">\n          <button @FadeTransition type=\"button\" class=\"action\" (click)=\"edit()\" *ngIf=\"state.value === 'initial'\">\n            <ion-icon src=\"assets/icons/pencil.svg\"></ion-icon>\n          </button>\n          <div class=\"action loader\" @FadeTransition *ngIf=\"state.value === 'loading'\"></div>\n          <div class=\"action done\" @FadeTransition *ngIf=\"state.value === 'done'\">\n            <ion-icon src=\"assets/icons/check-circle.svg\"></ion-icon>\n          </div>\n          <div class=\"action error\" @FadeTransition *ngIf=\"state.value === 'error'\">\n            <ion-icon src=\"assets/icons/cancel.svg\"></ion-icon>\n          </div>\n        </div>\n      </div>\n      <div class=\"input\" @FadeTransition *ngIf=\"state.value === 'edit'\">\n        <ng-container *ngIf=\"inputType !== 'select'\">\n          <input #inputElm [type]=\"inputType || 'text'\" [placeholder]=\"label || 'Saisir une valeur'\" [formControl]=\"input\">\n        </ng-container>\n        <ng-container *ngIf=\"inputType === 'select'\">\n          <select [name]=\"slug\" [formControl]=\"input\">\n            <option [ngValue]=\"null\" disabled>\n              {{label || 'SÃ©lectionner une valeur'}}\n            </option>\n            <option *ngFor=\"let item of inputSelectOptions\" [ngValue]=\"item.value\">\n              {{item.name}}\n            </option>\n          </select>\n        </ng-container>\n        <button type=\"button\" (click)=\"valueChange.emit(input.value)\" [disabled]=\"input.value === value || !input.valid\">\n          <ion-icon src=\"assets/icons/check.svg\"></ion-icon>\n        </button>\n      </div>\n    </div>\n  `,\n})\nexport class ProfileCardItemComponent implements OnInit, OnDestroy {\n  @ViewChild('inputElm') inputElm: { nativeElement: HTMLInputElement };\n\n  @Output() listen = new EventEmitter<ItemState>();\n  @Output() valueChange = new EventEmitter<any>();\n\n  @Input() value: any = null;\n  @Input() name?: string = null;\n  @Input() label?: string;\n  @Input() input?: FormControl;\n  @Input() inputType?: string;\n  @Input() inputMode?: string;\n  @Input() inputPattern?: string;\n  @Input() inputMaxLength?: number;\n  @Input() inputMinLength?: number;\n  @Input() inputSelectOptions?: ItemSelectOption[];\n  @Input() inputValidators?: ValidatorFn[] = [];\n  @Input() submit?: (slug: string, value: any) => Promise<any>;\n  @Input() slug?: string;\n\n  state = new BehaviorSubject<ItemState>('initial');\n\n  private subscriptions: Subscription[] = [];\n\n  ngOnInit() {\n    if (this.inputType === 'select' && !this.inputSelectOptions) {\n      throw new Error('inputSelectOptions is required for select input');\n    }\n\n    if (this.submit && !this.slug) {\n      throw new Error('slug is required when submit is defined');\n    }\n\n    this.name = this.resolveName(this.value);\n\n    if (!this.input) {\n      this.input = new FormControl(this.value, this.inputValidators || []);\n    } else {\n      this.input.setValue(this.value);\n\n      if (this.inputValidators.length > 0) {\n        this.input.setValidators(this.inputValidators);\n      }\n    }\n\n    const sub = this.state.subscribe(state => this.listen.emit(state));\n    this.subscriptions.push(sub);\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.forEach(sub => sub.unsubscribe());\n  }\n\n  edit() {\n    this.state.next('edit');\n    setTimeout(() => this.bindInput(), 200);\n  }\n\n  done(value: any) {\n    this.state.next('done');\n    this.value = value;\n    this.name = this.resolveName(value);\n  }\n\n  private bindInput() {\n    if (!this.inputElm) {\n      return;\n    }\n\n    const inputField = this.inputElm.nativeElement;\n\n    if (this.inputType !== 'select') {\n      inputField.focus();\n    }\n\n    if (this.inputMode) {\n      inputField.setAttribute('inputmode', this.inputMode);\n    }\n\n    if (this.inputPattern) {\n      inputField.setAttribute('pattern', this.inputPattern);\n    }\n\n    if (this.inputMaxLength) {\n      inputField.setAttribute('maxlength', this.inputMaxLength.toString());\n    }\n\n    if (this.inputMinLength) {\n      inputField.setAttribute('minlength', this.inputMinLength.toString());\n    }\n  }\n\n  private resolveName(value: any) {\n    if (this.inputType === 'select') {\n      const item = this.inputSelectOptions.find(i => i.value === value);\n      return item ? item.name : null;\n    } else {\n      return value;\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}