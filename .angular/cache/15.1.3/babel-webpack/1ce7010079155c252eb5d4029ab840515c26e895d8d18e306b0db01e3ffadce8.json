{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport __NG_CLI_RESOURCE__0 from \"./pro-reviews-form.component.scss?ngResource\";\nimport { Component, EventEmitter, Input, Output, ViewChild } from '@angular/core';\nimport { FormControl, Validators } from '@angular/forms';\nimport { Platform } from '@ionic/angular';\nlet ProReviewsFormComponent = class ProReviewsFormComponent {\n  constructor(platform) {\n    this.platform = platform;\n    this.reviewChange = new EventEmitter();\n    this.maxLength = 500;\n    this.loading = false;\n    this.rate = 0;\n    this.stars = [];\n    this.subscriptions = [];\n  }\n  ngOnInit() {\n    const review = {\n      rate: 0,\n      message: ''\n    };\n    this.stars = this.getStars(review.rate);\n    this.reviewInput = new FormControl(review.message, [Validators.maxLength(this.maxLength)]);\n  }\n  present() {\n    this.modal.present();\n    const sub = this.platform.backButton.subscribeWithPriority(10, () => {\n      if (!this.loading && this.modal.isOpen) {\n        this.cancel();\n      }\n    });\n    this.subscriptions.push(sub);\n  }\n  dismiss() {\n    this.modal.dismiss();\n    this.subscriptions.forEach(sub => sub.unsubscribe());\n  }\n  handle(note) {\n    this.rate = note;\n    this.stars = this.getStars(note);\n    if (!this.modal.isOpen) {\n      this.modal.present();\n    }\n  }\n  cancel() {\n    this.rate = 0;\n    this.stars = this.getStars(this.rate);\n    this.reviewInput.setValue('');\n    this.dismiss();\n  }\n  submit() {\n    this.loading = true;\n    const message = this.reviewInput.value;\n    const review = {\n      message,\n      rate: this.rate\n    };\n    setTimeout(() => {\n      this.loading = false;\n      this.reviewChange.emit(review);\n      this.dismiss();\n    }, 2000);\n  }\n  getStars(rate) {\n    const stars = [];\n    for (let i = 0; i < rate; i++) {\n      stars.push('assets/icons/star.svg');\n    }\n    for (let i = rate; i < 5; i++) {\n      stars.push('assets/icons/star-outline.svg');\n    }\n    return stars;\n  }\n};\nProReviewsFormComponent.ctorParameters = () => [{\n  type: Platform\n}];\nProReviewsFormComponent.propDecorators = {\n  modal: [{\n    type: ViewChild,\n    args: ['modal']\n  }],\n  reviewChange: [{\n    type: Output\n  }],\n  profile: [{\n    type: Input\n  }]\n};\nProReviewsFormComponent = __decorate([Component({\n  selector: 'pro-reviews-form',\n  template: `\n    <div class=\"rate-stars\">\n      <button\n        type=\"button\"\n        *ngFor=\"let star of stars; let i = index\"\n        [class.active]=\"rate >= i + 1\"\n        (click)=\"handle(i + 1)\"\n      >\n        <ion-icon [src]=\"star\"></ion-icon>\n      </button>\n    </div>\n    <div class=\"rate-actions\">\n      <button type=\"button\" (click)=\"present()\">\n        {{rate === 0 ? 'Rediger un avis' : 'Modifier mon avis'}}\n      </button>\n      <!-- <button type=\"button\" class=\"cancel\" (click)=\"cancel()\" *ngIf=\"rate > 0\">Annuler</button> -->\n    </div>\n\n    <ion-modal\n      #modal\n      [isOpen]=\"false\"\n      [breakpoints]=\"[0.6, 0.7, 0.8]\"\n      [initialBreakpoint]=\"0.6\"\n      [backdropDismiss]=\"false\"\n      [handle]=\"!loading\"\n    >\n      <ng-template>\n        <ion-content>\n          <div class=\"review-modal\">\n            <div class=\"review-loader\" *ngIf=\"loading\">\n              <app-spinner></app-spinner>\n              <div class=\"message\">Envoi en cours…</div>\n            </div>\n            <div class=\"review-user\">\n              <div class=\"picture\">\n                <img src=\"assets/img/profile.jpg\" alt=\"Flora Kouassi\">\n              </div>\n              <div class=\"info\">\n                <div class=\"name\">{{profile.name}}</div>\n                <div class=\"job\">{{profile.job}}</div>\n              </div>\n            </div>\n            <div class=\"review-message\">\n              Les avis sont publics et incluent les informations de compte.\n            </div>\n            <div class=\"review-stars\">\n              <button\n                type=\"button\"\n                *ngFor=\"let star of stars; let i = index\"\n                [class.active]=\"rate >= i + 1\"\n                (click)=\"handle(i + 1)\"\n              >\n                <ion-icon [src]=\"star\"></ion-icon>\n              </button>\n            </div>\n            <div class=\"review-form\">\n              <textarea\n                maxlength=\"500\"\n                placeholder=\"Dites ce que vous pensez de ce professionnel (facultatif)\"\n                [formControl]=\"reviewInput\"\n              ></textarea>\n              <div class=\"input-footer\">\n                <div>Avis public</div>\n                <div>{{ reviewInput.value.length }}/500</div>\n              </div>\n            </div>\n            <div class=\"review-actions\">\n              <button type=\"button\" class=\"cancel\" (click)=\"cancel()\">Annuler</button>\n              <button type=\"button\" class=\"submit\" (click)=\"submit()\" [disabled]=\"rate === 0\">Envoyer</button>\n            </div>\n          </div>\n        </ion-content>\n      </ng-template>\n    </ion-modal>\n  `,\n  styles: [__NG_CLI_RESOURCE__0]\n})], ProReviewsFormComponent);\nexport { ProReviewsFormComponent };","map":{"version":3,"mappings":"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","names":["Component","EventEmitter","Input","Output","ViewChild","FormControl","Validators","Platform","ProReviewsFormComponent","constructor","platform","ngOnInit","review","rate","message","stars","getStars","reviewInput","maxLength","present","modal","sub","backButton","subscribeWithPriority","loading","isOpen","cancel","subscriptions","push","dismiss","forEach","unsubscribe","handle","note","setValue","submit","value","setTimeout","reviewChange","emit","i","args","selector","template"],"sourceRoot":"","sources":["/home/digifemmes-22lab149/Bureau/soutramoi_app/src/app/pages/pro/components/pro-reviews-form.component.ts"],"sourcesContent":["import { Component, EventEmitter, Input, OnInit, Output, ViewChild } from '@angular/core';\nimport { FormControl, Validators } from '@angular/forms';\nimport { IonModal, Platform } from '@ionic/angular';\nimport { Subscription } from 'rxjs';\n\n@Component({\n  selector: 'pro-reviews-form',\n  styleUrls: ['./pro-reviews-form.component.scss'],\n  template: `\n    <div class=\"rate-stars\">\n      <button\n        type=\"button\"\n        *ngFor=\"let star of stars; let i = index\"\n        [class.active]=\"rate >= i + 1\"\n        (click)=\"handle(i + 1)\"\n      >\n        <ion-icon [src]=\"star\"></ion-icon>\n      </button>\n    </div>\n    <div class=\"rate-actions\">\n      <button type=\"button\" (click)=\"present()\">\n        {{rate === 0 ? 'Rediger un avis' : 'Modifier mon avis'}}\n      </button>\n      <!-- <button type=\"button\" class=\"cancel\" (click)=\"cancel()\" *ngIf=\"rate > 0\">Annuler</button> -->\n    </div>\n\n    <ion-modal\n      #modal\n      [isOpen]=\"false\"\n      [breakpoints]=\"[0.6, 0.7, 0.8]\"\n      [initialBreakpoint]=\"0.6\"\n      [backdropDismiss]=\"false\"\n      [handle]=\"!loading\"\n    >\n      <ng-template>\n        <ion-content>\n          <div class=\"review-modal\">\n            <div class=\"review-loader\" *ngIf=\"loading\">\n              <app-spinner></app-spinner>\n              <div class=\"message\">Envoi en cours…</div>\n            </div>\n            <div class=\"review-user\">\n              <div class=\"picture\">\n                <img src=\"assets/img/profile.jpg\" alt=\"Flora Kouassi\">\n              </div>\n              <div class=\"info\">\n                <div class=\"name\">{{profile.name}}</div>\n                <div class=\"job\">{{profile.job}}</div>\n              </div>\n            </div>\n            <div class=\"review-message\">\n              Les avis sont publics et incluent les informations de compte.\n            </div>\n            <div class=\"review-stars\">\n              <button\n                type=\"button\"\n                *ngFor=\"let star of stars; let i = index\"\n                [class.active]=\"rate >= i + 1\"\n                (click)=\"handle(i + 1)\"\n              >\n                <ion-icon [src]=\"star\"></ion-icon>\n              </button>\n            </div>\n            <div class=\"review-form\">\n              <textarea\n                maxlength=\"500\"\n                placeholder=\"Dites ce que vous pensez de ce professionnel (facultatif)\"\n                [formControl]=\"reviewInput\"\n              ></textarea>\n              <div class=\"input-footer\">\n                <div>Avis public</div>\n                <div>{{ reviewInput.value.length }}/500</div>\n              </div>\n            </div>\n            <div class=\"review-actions\">\n              <button type=\"button\" class=\"cancel\" (click)=\"cancel()\">Annuler</button>\n              <button type=\"button\" class=\"submit\" (click)=\"submit()\" [disabled]=\"rate === 0\">Envoyer</button>\n            </div>\n          </div>\n        </ion-content>\n      </ng-template>\n    </ion-modal>\n  `,\n})\nexport class ProReviewsFormComponent implements OnInit {\n  @ViewChild('modal') modal: IonModal;\n\n  @Output() reviewChange = new EventEmitter<ReviewItem>();\n  @Input() profile: Professional;\n\n  maxLength = 500;\n  loading = false;\n  rate = 0;\n  stars: string[] = [];\n  reviewInput: FormControl;\n\n  private subscriptions: Subscription[] = [];\n\n  constructor(private platform: Platform) { }\n\n  ngOnInit() {\n    const review: ReviewItem = { rate: 0, message: '' };\n\n    this.stars = this.getStars(review.rate);\n    this.reviewInput = new FormControl(review.message, [\n      Validators.maxLength(this.maxLength),\n    ]);\n  }\n\n  present() {\n    this.modal.present();\n\n    const sub = this.platform.backButton.subscribeWithPriority(10, () => {\n      if (!this.loading && this.modal.isOpen) {\n        this.cancel();\n      }\n    });\n\n    this.subscriptions.push(sub);\n  }\n\n  dismiss() {\n    this.modal.dismiss();\n    this.subscriptions.forEach(sub => sub.unsubscribe());\n  }\n\n  handle(note: RateValue | number) {\n    this.rate = note;\n    this.stars = this.getStars(note);\n\n    if (!this.modal.isOpen) {\n      this.modal.present();\n    }\n  }\n\n  cancel() {\n    this.rate = 0;\n    this.stars = this.getStars(this.rate);\n    this.reviewInput.setValue('');\n    this.dismiss();\n  }\n\n  submit() {\n    this.loading = true;\n    const message: string = this.reviewInput.value;\n    const review: ReviewItem = { message, rate: this.rate };\n\n    setTimeout(() => {\n      this.loading = false;\n      this.reviewChange.emit(review);\n      this.dismiss();\n    }, 2000);\n  }\n\n  private getStars(rate: number) {\n    const stars: string[] = [];\n\n    for (let i = 0; i < rate; i++) {\n      stars.push('assets/icons/star.svg');\n    }\n\n    for (let i = rate; i < 5; i++) {\n      stars.push('assets/icons/star-outline.svg');\n    }\n\n    return stars;\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}